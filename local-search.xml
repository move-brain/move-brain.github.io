<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>mysql的基础函数</title>
    <link href="/super_zhu/2023/04/05/mysql%E7%9A%84%E5%9F%BA%E7%A1%80%E5%87%BD%E6%95%B0/"/>
    <url>/super_zhu/2023/04/05/mysql%E7%9A%84%E5%9F%BA%E7%A1%80%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="mysql基础函数"><a href="#mysql基础函数" class="headerlink" title="mysql基础函数"></a>mysql基础函数</h1><h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><p><img src="https://s2.loli.net/2023/04/05/KqsLbmhOlB7vpHt.png" alt="image.png"></p><p>​              <u>lpad对于int类型的数据不起效果因为int不显示前面的零</u></p><h2 id="数组函数"><a href="#数组函数" class="headerlink" title="数组函数"></a>数组函数</h2><p><img src="https://s2.loli.net/2023/04/05/EmA48zUTyrwODsS.png" alt="image.png"></p><p><img src="https://s2.loli.net/2023/04/05/Zi2QG1t5EUmYcsO.png" alt="image.png"></p><p>mod是取余的意思</p><h2 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h2><p><img src="https://s2.loli.net/2023/04/05/YmQq6HKJa95vIVF.png" alt="image.png"></p><p>比如</p><p><code>select date_add(now(),interval 70 day)</code></p><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><h3 id="普通约束"><a href="#普通约束" class="headerlink" title="普通约束"></a>普通约束</h3><p><img src="https://s2.loli.net/2023/04/05/qUXdzQtPxpf7SVi.png" alt="image.png"></p><p>age int check(age&gt;0&amp;&amp;age&lt;&#x3D;120)   check这个约束是这样用，代表年龄在0到120</p><p>status char(1) default’1’    代表如果不设置status这个值，默认为 1</p><p>id int primary key auto_increment  代表自动增长而且在这一行数据中唯一，与unique不同，unique是在这一个字段中唯一</p><p>name varchar(20) not null unique 代表唯一而且不能为空</p><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><h4 id="添加外键"><a href="#添加外键" class="headerlink" title="添加外键"></a>添加外键</h4><p><img src="https://s2.loli.net/2023/04/05/V6aMr7zxCnkFUJi.png" alt="image.png"></p><h4 id="删除外键"><a href="#删除外键" class="headerlink" title="删除外键"></a>删除外键</h4><p>alter table 表名 drop foreign key 外键名称</p><h4 id="更新-x2F-删除时相应的父子表关系"><a href="#更新-x2F-删除时相应的父子表关系" class="headerlink" title="更新&#x2F;删除时相应的父子表关系"></a>更新&#x2F;删除时相应的父子表关系</h4><p><img src="https://s2.loli.net/2023/04/05/kWhvLiSuJ5aq6dI.png" alt="image.png"></p><p>运用的语法</p><p><img src="https://s2.loli.net/2023/04/05/v34qLnGjWe8YySw.png" alt="image.png"></p><p>这个代表更新时候遵守的规则和删除时遵守的规则</p><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><p>对查询结果去重只需要在select后加入distinct 比如</p><p><img src="https://s2.loli.net/2023/04/05/cIpbLHVgRmxJX3n.png" alt="image.png"></p><h4 id="隐式内连接"><a href="#隐式内连接" class="headerlink" title="隐式内连接"></a>隐式内连接</h4><p><code>select emp.name, dept.name from emp ,dept where epm.dept_id=dept.id;</code></p><p>以上是查询两张表的员工名字和部门名字的代码</p><h4 id="显式内连接"><a href="#显式内连接" class="headerlink" title="显式内连接"></a>显式内连接</h4><p><code>select e,name,d.name from emp e join dept d on e.dept_id=d.id</code></p><p>还有另一种形式 inner可以省略</p><p><code>select e,name,d.name drom emp e join dept d on e.dept_id=d.id</code></p><h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><h4 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h4><p>会查询到左边这个表的全部信息纵使它不符合条件</p><p><img src="https://s2.loli.net/2023/04/05/kz58dG2FrqweZxM.png" alt="image.png"></p><h4 id="右外连接"><a href="#右外连接" class="headerlink" title="右外连接"></a>右外连接</h4><p>同理</p><p><img src="https://s2.loli.net/2023/04/05/odPzfsupJQ3DWHA.png" alt="image.png"></p><h3 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h3><p>自连接的作用，比如下面 managerid代表了直属领导，当我们要查询每个人的领导时，需要用到自查询</p><p><img src="https://s2.loli.net/2023/04/05/gsqDZlzCtnrdIiu.png" alt="image.png"></p><p><img src="https://s2.loli.net/2023/04/05/ShvzUH3EW2FrDiO.png" alt="image.png"></p><p>把它看成两张表更好理解,如果想要查询没有领导也可以查询出来，可以用左查询</p><h3 id="内连接和外连接的区别"><a href="#内连接和外连接的区别" class="headerlink" title="内连接和外连接的区别"></a>内连接和外连接的区别</h3><p>left join （左连接）：返回包括左表中的所有记录和右表中连接字段相等的记录。. right join （右连接）：返回包括右表中的所有记录和左表中连接字段相等的记录。. inner join （等值连接或者叫内连接）：只返回两个表中连接字段相等的行。</p><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><p><img src="https://s2.loli.net/2023/04/05/7HsJfgApSUK6Cvi.png" alt="image.png"></p><h3 id="列子查询"><a href="#列子查询" class="headerlink" title="列子查询"></a>列子查询</h3><p><img src="https://s2.loli.net/2023/04/05/CuxB7XNvEA3r6Fs.png" alt="image.png"></p><p><code>select id from dept where name=&#39;销售部&#39;or name=&#39;市场部&#39;</code></p><p>查询市场部和销售部的所有员工的id</p><p><code>select * from emp where dept_id in (select id from dept where name=&#39;销售部&#39;or name=&#39;市场部&#39;</code>) &#96;</p><h3 id="行子查询"><a href="#行子查询" class="headerlink" title="行子查询"></a>行子查询</h3><p>还有这种表现形式，行子查询</p><p><code>select * from emp where (salary,managerid)=(12500,3)</code></p><p><img src="https://s2.loli.net/2023/04/05/T19CxdDNGbqhXZW.png" alt="image.png"></p><h3 id="表子查询"><a href="#表子查询" class="headerlink" title="表子查询"></a>表子查询</h3><p><img src="https://s2.loli.net/2023/04/05/A1U8iOgaBEY5Nxz.png" alt="image.png"></p><p>还可以把查询返回的数据当成一张表</p><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><h2 id="查看事务"><a href="#查看事务" class="headerlink" title="查看事务"></a>查看事务</h2><p>select @@autocommit</p><p>自动提交为1，手动提交为0</p><h2 id="更改事务"><a href="#更改事务" class="headerlink" title="更改事务"></a>更改事务</h2><p>set @@autocommit&#x3D;0</p><h2 id="提交事务"><a href="#提交事务" class="headerlink" title="提交事务"></a>提交事务</h2><p>commit</p><h2 id="回滚事务"><a href="#回滚事务" class="headerlink" title="回滚事务"></a>回滚事务</h2><p>当发生错误时，就需要回滚事务</p><p>rollback；</p><p>还有另一种方式运用事务</p><h2 id="开启事务"><a href="#开启事务" class="headerlink" title="开启事务"></a>开启事务</h2><p>start transaction或者 begin</p><p>其余不变</p><h2 id="事务隔离"><a href="#事务隔离" class="headerlink" title="事务隔离"></a>事务隔离</h2><p>查看事务隔离级别</p><p><img src="/mysql%E7%9A%84%E5%9F%BA%E7%A1%80%E5%87%BD%E6%95%B0.assets/image-20230405124449153.png" alt="image-20230405124449153"></p><p><img src="https://s2.loli.net/2023/04/05/CyQrwIN5jnGhpA8.png" alt="image.png"></p><h2 id="查看事务进程"><a href="#查看事务进程" class="headerlink" title="查看事务进程"></a>查看事务进程</h2><p>SELECT * FROM information_schema.INNODB_TRX</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue3-全局事件的使用</title>
    <link href="/super_zhu/2023/04/04/vue3-%E5%85%A8%E5%B1%80%E4%BA%8B%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/super_zhu/2023/04/04/vue3-%E5%85%A8%E5%B1%80%E4%BA%8B%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="vue3-全局事件的使用"><a href="#vue3-全局事件的使用" class="headerlink" title="vue3-全局事件的使用"></a>vue3-全局事件的使用</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>对于全局事件总线，它是一种组件间通信的方式，可以让任意组件进行通信</strong></p><p>它就相当于一个中间介质可以让组件通信，可以理解为他就是一个上帝，不参与组件，只负责通信</p><p>如下图</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/28a918da2c7841a8baced67fc46ff24e~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p> vue3推荐使用mitt</p><h3 id="安装mitt"><a href="#安装mitt" class="headerlink" title="安装mitt"></a>安装mitt</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install mitt<br></code></pre></td></tr></table></figure><h3 id="mitt引入"><a href="#mitt引入" class="headerlink" title="mitt引入"></a>mitt引入</h3><h4 id="全局引入"><a href="#全局引入" class="headerlink" title="全局引入"></a>全局引入</h4><p>在main.js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> mitt <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;mitt&quot;</span><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>)<br><span class="hljs-keyword">const</span> bus = <span class="hljs-title function_">mitt</span>()<br>app.<span class="hljs-property">config</span>.<span class="hljs-property">globalProperties</span>.<span class="hljs-property">$bus</span> = bus<br></code></pre></td></tr></table></figure><p>在组件内使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; getCurrentInstance &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">const</span> cxt  = <span class="hljs-title function_">getCurrentInstance</span>() <span class="hljs-comment">//相当于Vue2中的this</span><br>   <span class="hljs-keyword">const</span> bus = cxt.<span class="hljs-property">appContext</span>.<span class="hljs-property">config</span>.<span class="hljs-property">globalProperties</span>.<span class="hljs-property">$bus</span><br>   <span class="hljs-keyword">const</span> emitMitt = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>       bus.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;printMessage&#x27;</span>,<span class="hljs-string">&#x27;我被触发了&#x27;</span>)   <span class="hljs-comment">//触发其他组件监听的名为printMessage的事件</span><br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="局部引入（推荐）"><a href="#局部引入（推荐）" class="headerlink" title="局部引入（推荐）"></a>局部引入（推荐）</h4><p>在src目录内定义一个js文件（在这里是bus.js）</p><p>在bus.js文件中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> mitt <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;mitt&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> events = <span class="hljs-title function_">mitt</span>()<br></code></pre></td></tr></table></figure><p>在使用的组件内</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-keyword">import</span> &#123;events&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../bus.js&#x27;</span>  <span class="hljs-comment">//引入bus.js文件</span><br><br><span class="hljs-comment">//在setup中</span><br><span class="hljs-keyword">let</span> <span class="hljs-title function_">clikmenu</span>=(<span class="hljs-params">e</span>)=&gt;&#123;<br>  events.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&quot;clikmenu&quot;</span>,e)  <span class="hljs-comment">//可以直接使用</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="主要使用的三种方法"><a href="#主要使用的三种方法" class="headerlink" title="主要使用的三种方法"></a>主要使用的三种方法</h2><p> 分别是<code>emit</code>，<code>on</code>，<code>off</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//三种方法的主要结构分别是</span><br><span class="hljs-title function_">emit</span>(name,data)  <span class="hljs-comment">// 触发相应事件  name:触发事件的名字   data:传递过去的参数</span><br><span class="hljs-title function_">on</span>(name,callback)  <span class="hljs-comment">//绑定相应的事件等待emit的触发   name:触发事件的名字   callback:出发后执行回调函数</span><br><span class="hljs-title function_">off</span>(name) <span class="hljs-comment">//解绑相应事件   name:需要解绑的事件名</span><br></code></pre></td></tr></table></figure><p><strong>注意：必须保证先绑定事件再触发事件</strong></p><p><strong>以下示例</strong></p><p><strong>在layout组件中</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;events&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../bus.js&#x27;</span> <br><br><span class="hljs-comment">//在setup中</span><br><span class="hljs-title function_">onMounted</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>events.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;clikmenu&quot;</span>,<span class="hljs-function">(<span class="hljs-params">e</span>)=&gt;</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e)<br>&#125;)<br>&#125;)<br><br><br><span class="hljs-title function_">onBeforeUnmount</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>        events.<span class="hljs-title function_">off</span>(<span class="hljs-string">&#x27;clikmenu&#x27;</span>)<br>    &#125;)<br></code></pre></td></tr></table></figure><p>在aside.vue组件中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"> &lt;el-menu-item @click=<span class="hljs-string">&quot;clikm(item)&quot;</span>  v-<span class="hljs-keyword">else</span> :key=<span class="hljs-string">&quot;index + item.id&quot;</span> :index=<span class="hljs-string">&quot;item.id&quot;</span>&gt;<br> <br><span class="hljs-keyword">import</span> &#123;events&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../bus.js&#x27;</span><br><span class="hljs-comment">//setup中</span><br><span class="hljs-keyword">let</span> <span class="hljs-title function_">clikm</span>=(<span class="hljs-params">e</span>)=&gt;&#123;<br>  events.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&quot;clikmenu&quot;</span>,e)<br>&#125;<br></code></pre></td></tr></table></figure><p>当在aside.vue组件执行点击函数clikm就会触发layout.vue中的onMounted中绑定好的事件的回调函数</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue3修改第三方ui组件或者其他样式不生效</title>
    <link href="/super_zhu/2023/03/29/vue3%E4%BF%AE%E6%94%B9%E7%AC%AC%E4%B8%89%E6%96%B9ui%E7%BB%84%E4%BB%B6%E5%A4%B1%E6%95%88/"/>
    <url>/super_zhu/2023/03/29/vue3%E4%BF%AE%E6%94%B9%E7%AC%AC%E4%B8%89%E6%96%B9ui%E7%BB%84%E4%BB%B6%E5%A4%B1%E6%95%88/</url>
    
    <content type="html"><![CDATA[<h1 id="关于vue在添加scoped后修改第三方ui组件或者其他样式不生效"><a href="#关于vue在添加scoped后修改第三方ui组件或者其他样式不生效" class="headerlink" title="关于vue在添加scoped后修改第三方ui组件或者其他样式不生效"></a>关于vue在添加scoped后修改第三方ui组件或者其他样式不生效</h1><h2 id="废话"><a href="#废话" class="headerlink" title="废话"></a>废话</h2><p><strong>最近一个项目，因为vue的实际开发经验少，一直修改el-table样式失效，苦苦找不到原因折磨死我了，啊啊啊啊啊！！！最后多方查找才找到其原因，痛煞老</strong></p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>我们常常在组件中加入<code>scoped</code>来防止组件间的样式污染，而<code>scoped</code>就是罪魁祸首，我们先说scoped的原理</p><h2 id="scoped的原理"><a href="#scoped的原理" class="headerlink" title="scoped的原理"></a>scoped的原理</h2><h3 id="在组件添加了scoped后发生的变化"><a href="#在组件添加了scoped后发生的变化" class="headerlink" title="在组件添加了scoped后发生的变化"></a>在组件添加了scoped后发生的变化</h3><ul><li>vue会在dom节点加入一个data-v-xxxxx的属性</li><li>在编译css后，会在其后最后一个选择器加入[data-v-xxxxx]形成属性选择器</li><li>因为每个组件的data-v-xxxxx是唯一的，所以scoped起到管理样式，防止样式污染的作用</li></ul><h3 id="在dom节点中打入属性"><a href="#在dom节点中打入属性" class="headerlink" title="在dom节点中打入属性"></a><strong>在dom节点中打入属性</strong></h3><p>对于本组件的dom节点和其子组件的根节点都会打入属性（只有根节点）</p><p>其引入的<code>el-table</code>是属于子组件，所以下面第二张图有两个div被打入属性</p><p><img src="https://s2.loli.net/2023/03/29/XdPCfvgcytnZ1p7.png" alt="image.png"></p><p><img src="https://s2.loli.net/2023/03/29/PMyF9rxgV8B2bho.png" alt="image.png"></p><h3 id="编译css时打入相应属性"><a href="#编译css时打入相应属性" class="headerlink" title="编译css时打入相应属性"></a><strong>编译css时打入相应属性</strong></h3><p>添加scoped后，我们会在选择器后加入属性变成属性选择器</p><p>如用上面的程序的类名示例</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css">//编译前<br><span class="hljs-selector-class">.div_</span>&#123;<br><span class="hljs-attribute">background</span>:<span class="hljs-number">#000</span>;<br>&#125;<br>//编译后<br><span class="hljs-selector-class">.div_</span><span class="hljs-selector-attr">[data-v-0b22be8e]</span>&#123;<br><span class="hljs-attribute">background</span>:<span class="hljs-number">#000</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样就可以防止组件间的样式污染，达到只对于本组件生效</p><h2 id="对于第三方组件样式不生效原因"><a href="#对于第三方组件样式不生效原因" class="headerlink" title="对于第三方组件样式不生效原因"></a>对于第三方组件样式不生效原因</h2><p>以上说了打入scoped打入属性的范围和css编译的变化我们就可以很快的理解</p><p>如下创建了一个子组件</p><p><img src="https://s2.loli.net/2023/03/29/tzZXrV3oQw6D1xh.png" alt="image.png"></p><p>将这个子组件引入了一个添加了scoped的父组件中</p><p>其在效果是这样的</p><p><img src="https://s2.loli.net/2023/03/29/9il3cLKvpBnMbdY.png" alt="image.png"></p><p>可以看到其根节点div被打入了父组件的属性，父组件的样式以下</p><p><img src="https://s2.loli.net/2023/03/29/J8ugAY57BeinMyN.png" alt="image.png"></p><p>但最后结果显示是这样的</p><p><img src="https://s2.loli.net/2023/03/29/uwaTACpgWYEq3Hj.png" alt="image.png"></p><p>可以看到我们修改第三方ui失败，因为父组件中的样式是被打入属性的，而子组件span是没有属性的，所以选择器无法选择到span,所以修改失败</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">//父组件的样式是被编译成<br><span class="hljs-selector-class">.test</span> <span class="hljs-selector-tag">span</span><span class="hljs-selector-attr">[data-v-47dbdb26]</span>&#123;<br><span class="hljs-attribute">color</span>:<span class="hljs-number">#ff0000</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="样式穿刺解决无法修改问题"><a href="#样式穿刺解决无法修改问题" class="headerlink" title="样式穿刺解决无法修改问题"></a>样式穿刺解决无法修改问题</h2><p>在这里介绍三种穿刺方法</p><p>对于css可用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">// 使用&gt;&gt;&gt;<br><span class="hljs-selector-class">.test</span> &gt;&gt;&gt; <span class="hljs-selector-tag">span</span>&#123;<br><span class="hljs-attribute">color</span>:<span class="hljs-number">#ff0000</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>对于sass和less可用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css">// 使用/deep/<br><span class="hljs-selector-class">.test</span>&#123;<br>/deep/ <span class="hljs-selector-tag">span</span>&#123;<br><span class="hljs-attribute">color</span>:<span class="hljs-number">#ff0000</span><br>&#125;<br>&#125;<br><br><br>//在一些情况下无法使用可以使用::v-deep<br>.test&#123;<br>::v-deep span&#123;<br><span class="hljs-attribute">color</span>:<span class="hljs-number">#ff0000</span><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">//其编译结果都为<br><span class="hljs-selector-class">.test</span><span class="hljs-selector-attr">[data-v-47dbdb26]</span> <span class="hljs-selector-tag">span</span>&#123;<br><span class="hljs-attribute">color</span>:<span class="hljs-number">#ff0000</span><br>&#125;<br></code></pre></td></tr></table></figure><p>对于样式穿刺解决问题的原理相信大家都看出来了，就是在css编译时，不让父组件的属性结合样式穿刺器后选择器，从而达到穿刺到子组件的目的进而对样式进行修改</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>样式穿刺</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pinia的基础应用</title>
    <link href="/super_zhu/2023/03/23/pinia%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <url>/super_zhu/2023/03/23/pinia%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="pinia的基础使用"><a href="#pinia的基础使用" class="headerlink" title="pinia的基础使用"></a>pinia的基础使用</h1><h2 id="pinia的安装"><a href="#pinia的安装" class="headerlink" title="pinia的安装"></a>pinia的安装</h2><p>只需要在终端输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install pinia<br></code></pre></td></tr></table></figure><h2 id="利用pinia定义一个store"><a href="#利用pinia定义一个store" class="headerlink" title="利用pinia定义一个store"></a>利用pinia定义一个store</h2><p>在vue3的<code>main.js</code>中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createPinia &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">createPinia</span>())<br></code></pre></td></tr></table></figure><p>在相应的store的js文件中</p><p>其中pinia有两个写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; defineStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br><span class="hljs-comment">//userstore是这个状态的唯一标识  这是pinia的setup Stores写法</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> usestore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;userinfo&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;&#125;)<br>pinia的options <span class="hljs-title class_">Stores</span>写法<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> usestore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;userinfo&#x27;</span>, &#123;&#125;)<br></code></pre></td></tr></table></figure><p>下面介绍setup Stores写法</p><h2 id="state"><a href="#state" class="headerlink" title="state"></a>state</h2><p>在代码中定义数据再进行返回相当于options Stores的state</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//在login.js</span><br><span class="hljs-keyword">import</span> &#123; defineStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br><span class="hljs-keyword">import</span> &#123; reactive, ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> usestore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;userinfo&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> logindata = <span class="hljs-title function_">reactive</span>(&#123;&#125;)<br>    <span class="hljs-comment">//或者ref都可以</span><br>    <span class="hljs-keyword">return</span>&#123;<br>    logindata<br>    &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>在业务文件中使用数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;usestore&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../pinia/login&#x27;</span><br><span class="hljs-keyword">var</span> store=<span class="hljs-title function_">usestore</span>()<br><span class="hljs-comment">//可以直接store.logindata使用login.js</span><br></code></pre></td></tr></table></figure><h2 id="getters和actions"><a href="#getters和actions" class="headerlink" title="getters和actions"></a>getters和actions</h2><p>相比于options Stores写法，setup Stores写法的函数相当于getters和actions</p><p>action支持异步调用，两种写法都可以</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">setinfo</span>(<span class="hljs-params">data</span>) &#123;<br>    logindata=data<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getinfo</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> logindata<br>&#125;<br></code></pre></td></tr></table></figure><p>在业务文件中</p><p><strong>actions</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-keyword">let</span> <span class="hljs-title function_">onSubmit</span>=(<span class="hljs-params"></span>)=&gt;&#123;<br>store.<span class="hljs-title function_">setinfo</span>(data.<span class="hljs-property">logindata</span>)   <span class="hljs-comment">//可以直接调动函数</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>getters</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div&gt;&#123;&#123;store.<span class="hljs-title function_">getinfo</span>().<span class="hljs-property">username</span>&#125;&#125;&lt;<span class="hljs-regexp">/div&gt;  /</span><span class="hljs-regexp">/下面记得暴露了store  可直接使用</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">/</span><span class="hljs-regexp">/JavaScript</span><br><span class="hljs-regexp">import &#123;usestore&#125; from &#x27;../</span>pinia/login<span class="hljs-string">&#x27;</span><br><span class="hljs-string">setup()&#123;</span><br><span class="hljs-string">   </span><br><span class="hljs-string">var store=usestore()</span><br><span class="hljs-string">return&#123;</span><br><span class="hljs-string">store</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="subscribe"><a href="#subscribe" class="headerlink" title="$subscribe"></a>$subscribe</h2><p>当所属的的store的数据发生改变便执行回调函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;usestore&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../pinia/login&#x27;</span><br><span class="hljs-keyword">var</span> store=<span class="hljs-title function_">usestore</span>()<br>store.$subscribe(<span class="hljs-function">(<span class="hljs-params">mutation, state</span>)=&gt;</span>&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(mutation);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(state);<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="数据持久化（存储在本地）"><a href="#数据持久化（存储在本地）" class="headerlink" title="数据持久化（存储在本地）"></a>数据持久化（存储在本地）</h2><p>下载插件<code>pinia-plugin-persist</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i pinia-plugin-persist<br></code></pre></td></tr></table></figure><p>再在main.js引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createPinia &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br><span class="hljs-keyword">import</span> piniaPluginPersist <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia-plugin-persist&#x27;</span><br><span class="hljs-keyword">const</span> pinia = <span class="hljs-title function_">createPinia</span>()<br>pinia.<span class="hljs-title function_">use</span>(piniaPluginPersist)<br>app.<span class="hljs-title function_">use</span>(pinia)<br></code></pre></td></tr></table></figure><p>在pinia的文件下</p><p>对于setup Stores写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; defineStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br><span class="hljs-keyword">import</span> &#123; reactive, ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> usestore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;userinfo&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> logindata = <span class="hljs-title function_">reactive</span>(&#123;&#125;)<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">setinfo</span>(<span class="hljs-params">data</span>) &#123;<br>        logindata.<span class="hljs-property">username</span> = data.<span class="hljs-property">username</span><br>        logindata.<span class="hljs-property">passwrod</span> = data.<span class="hljs-property">passwrod</span><br>    &#125;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">getinfo</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> logindata<br>    &#125;<br>    <span class="hljs-keyword">return</span> &#123;<br>        logindata,<br>        setinfo,<br>        getinfo,<br>    &#125;<br><br>&#125;, &#123;<br>    <span class="hljs-attr">persist</span>: &#123;<br>        <span class="hljs-attr">enabled</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">strategies</span>: [&#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-attr">storage</span>: <span class="hljs-variable language_">localStorage</span> &#125;]<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>对于options setup写法来说只要在state同级加入persist配置即可</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pinia</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sass的基础应用</title>
    <link href="/super_zhu/2023/03/17/sass/"/>
    <url>/super_zhu/2023/03/17/sass/</url>
    
    <content type="html"><![CDATA[<h1 id="sass"><a href="#sass" class="headerlink" title="sass"></a>sass</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在安装之前建议先卸载旧版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm uninstall sass-loader node-sass<br></code></pre></td></tr></table></figure><p>然后进行安装</p><p><strong>切记！！！</strong></p><p>如果你的node版本不是最新版，请指定版本安装</p><p>可前往这里查询<a href="https://www.npmjs.com/package/node-sass">node-sass - npm (npmjs.com)</a></p><p>至于node-sass和sass-loader的对应版本可自行查询百度</p><p>如果你的node是最新版可直接用以下命令行安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install node-sass sass-loader -D<br></code></pre></td></tr></table></figure><p><strong>重点！！！</strong></p><p>如无法正常卸载node-sass和sass-loader，请在<strong>package.json文件</strong>和<strong>package-lock.json文件</strong>修改两个包的版本号再执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install<br></code></pre></td></tr></table></figure><p>如我的node版本是<code>v18.15.0</code>对应包版本是</p><p><img src="https://s2.loli.net/2023/03/18/fatHquTmOdBFzEX.png" alt="image.png"></p><p>比如我们有一个.sass文件，我们现在要把他编译成.css文件</p><p>文件名为test.sass</p><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sass test.scss<br></code></pre></td></tr></table></figure><p>也可以直接能保存到css文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sass test.scss runoob-test.css<br></code></pre></td></tr></table></figure><h2 id="sass变量"><a href="#sass变量" class="headerlink" title="sass变量"></a>sass变量</h2><p>使用$符号表示变量</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-keyword">$variablename</span>: value;</span><br></code></pre></td></tr></table></figure><h3 id="值的变量"><a href="#值的变量" class="headerlink" title="值的变量"></a>值的变量</h3><p>如下代码示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sass">$myFont: Helvetica, sans-serif;<br>$myColor: red;<br>$myFontSize: 18px;<br>$myWidth: 680px;<br><br>body &#123;<br>  font-family: $myFont;<br>  font-size: $myFontSize;<br>  color: $myColor;<br>&#125;<br><br>#container &#123;<br>  width: $myWidth;<br>&#125;<br></code></pre></td></tr></table></figure><p>换成css代码是</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">font-family</span>: Helvetica, sans-serif;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br><br><span class="hljs-selector-id">#container</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">680px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>你在标签里定义的话，作用域就只在定义的标签里</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-variable">$myColor</span>: red;<br><br><span class="hljs-selector-tag">h1</span> &#123;<br>  <span class="hljs-variable">$myColor</span>: green;   <span class="hljs-comment">// 定义了一个变量，只在 h1 里头有用，局部作用域</span><br>  <span class="hljs-attribute">color</span>: <span class="hljs-variable">$myColor</span>;<br>&#125;<br><br><span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-variable">$myColor</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>利用！global就能够让变量变成全局</p><p>如</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mel">$myColor: red;<br><br>h1 &#123;<br>  $myColor: green !<span class="hljs-keyword">global</span>;  <span class="hljs-comment">// 全局作用域</span><br>  <span class="hljs-keyword">color</span>: $myColor;<br>&#125;<br><br>p &#123;<br>  <span class="hljs-keyword">color</span>: $myColor;<br>&#125;<br></code></pre></td></tr></table></figure><p>转换成css代码就是</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-tag">h1</span> &#123;<br>  <span class="hljs-attribute">color</span>: green;<br>&#125;<br><br><span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-attribute">color</span>: green;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="sass的嵌套规则和属性"><a href="#sass的嵌套规则和属性" class="headerlink" title="sass的嵌套规则和属性"></a>sass的嵌套规则和属性</h2><h3 id="嵌套规则"><a href="#嵌套规则" class="headerlink" title="嵌套规则"></a>嵌套规则</h3><p>类似于html</p><p>如</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-tag">nav</span> &#123;<br>  <span class="hljs-selector-tag">ul</span> &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">list-style</span>: none;<br>  &#125;<br>  <span class="hljs-selector-tag">li</span> &#123;<br>    <span class="hljs-attribute">display</span>: inline-block;<br>  &#125;<br>  <span class="hljs-selector-tag">a</span> &#123;<br>    <span class="hljs-attribute">display</span>: block;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">6px</span> <span class="hljs-number">12px</span>;<br>    <span class="hljs-attribute">text-decoration</span>: none;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>转换成css为</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-tag">nav</span> &#123;<br>  <span class="hljs-selector-tag">ul</span> &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">list-style</span>: none;<br>  &#125;<br>  <span class="hljs-selector-tag">li</span> &#123;<br>    <span class="hljs-attribute">display</span>: inline-block;<br>  &#125;<br>  <span class="hljs-selector-tag">a</span> &#123;<br>    <span class="hljs-attribute">display</span>: block;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">6px</span> <span class="hljs-number">12px</span>;<br>    <span class="hljs-attribute">text-decoration</span>: none;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="嵌套属性"><a href="#嵌套属性" class="headerlink" title="嵌套属性"></a>嵌套属性</h3><p>说白了就是有相同前缀的属性可以写的更简洁</p><p>比如现在关于字的样式写法</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-attribute">font</span>: &#123;<br>  family: Helvetica, sans-serif;<br>  size: <span class="hljs-number">18px</span>;<br>  weight: bold;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译成</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">font-family</span>: Helvetica, sans-serif;<br><span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;<br><span class="hljs-attribute">font-weight</span>: bold;<br><br><span class="hljs-attribute">text-align</span>: center;<br><span class="hljs-attribute">text-transform</span>: lowercase;<br><span class="hljs-attribute">text-overflow</span>: hidden;<br></code></pre></td></tr></table></figure><h2 id="import"><a href="#import" class="headerlink" title="@import"></a>@import</h2><p>对于sass也可以导入css文件</p><p>如导入sass文件</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;variables&quot;</span>;<br><span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;colors&quot;</span>;<br><span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;reset&quot;</span>;<br></code></pre></td></tr></table></figure><p>其中 “colors”是文件名</p><h2 id="mixin-与-include"><a href="#mixin-与-include" class="headerlink" title="@mixin 与 @include"></a>@mixin 与 @include</h2><p><strong>@mixin 指令允许我们定义一个可以在整个样式表中重复使用的样式。</strong></p><p><strong>@include 指令可以将混入（mixin）引入到文档中。</strong></p><h3 id="定义一个mixin"><a href="#定义一个mixin" class="headerlink" title="定义一个mixin"></a>定义一个mixin</h3><p>对于mixin公式</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-keyword">@mixin</span> name &#123; property: value; property: value; ... &#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：对于 - 和 _ 在sass中是一样的  如 @mixin important-text { } 与 @mixin important_text { } 这两个是一样的mixin</p></blockquote><p>定义示例</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-keyword">@mixin</span> important-text &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">25px</span>;<br>  <span class="hljs-attribute">font-weight</span>: bold;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid blue;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用mixin"><a href="#使用mixin" class="headerlink" title="使用mixin"></a>使用mixin</h3><p>使用@include包含mixin</p><p>如以下sass代码</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-class">.danger</span> &#123;<br>  <span class="hljs-keyword">@include</span> important-text;  <span class="hljs-comment">//在定义示例</span><br>  <span class="hljs-attribute">background-color</span>: green;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>转换成css</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-class">.danger</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">25px</span>;<br>  <span class="hljs-attribute">font-weight</span>: bold;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid blue;<br>  <span class="hljs-attribute">background-color</span>: green;<br>&#125;<br></code></pre></td></tr></table></figure><p>当然mixin也可以引入mixin</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-keyword">@mixin</span> special-text &#123;<br>  <span class="hljs-keyword">@include</span> important-text;<br>  <span class="hljs-keyword">@include</span> link;<br>  <span class="hljs-keyword">@include</span> special-border;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="向mixin传入变量"><a href="#向mixin传入变量" class="headerlink" title="向mixin传入变量"></a>向mixin传入变量</h3><p>如以下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">/* 混入接收两个参数 */</span><br><span class="hljs-keyword">@mixin</span> bordered(<span class="hljs-variable">$color</span>, <span class="hljs-variable">$width</span>) &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-variable">$width</span> solid <span class="hljs-variable">$color</span>;<br>&#125;<br><br><span class="hljs-selector-class">.myArticle</span> &#123;<br>  <span class="hljs-keyword">@include</span> bordered(blue, <span class="hljs-number">1px</span>);  <span class="hljs-comment">// 调用混入，并传递两个参数</span><br>&#125;<br><br><span class="hljs-selector-class">.myNotes</span> &#123;<br>  <span class="hljs-keyword">@include</span> bordered(red, <span class="hljs-number">2px</span>); <span class="hljs-comment">// 调用混入，并传递两个参数</span><br>&#125;<br></code></pre></td></tr></table></figure><p>转换成css代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.myArticle</span> &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid blue;<br>&#125;<br><br><span class="hljs-selector-class">.myNotes</span> &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid red;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>定义传入默认值则是</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@mixin</span> bordered($<span class="hljs-attribute">color</span>: blue, $<span class="hljs-attribute">width</span>: <span class="hljs-number">1px</span>) &#123;<br>  <span class="hljs-attribute">border</span>: $width solid $color;<br>&#125;<br></code></pre></td></tr></table></figure><p>当我们对于一个有默认值的mixin我们只需要传入想要的值，如</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-keyword">@mixin</span> sexy-border(<span class="hljs-variable">$color</span>, <span class="hljs-variable">$width</span>: <span class="hljs-number">1in</span>) &#123;<br>  <span class="hljs-attribute">border</span>: &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-variable">$color</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-variable">$width</span>;<br>    style: dashed;<br>  &#125;<br>&#125;<br><span class="hljs-selector-tag">p</span> &#123; <span class="hljs-keyword">@include</span> sexy-border(blue); &#125;<br><span class="hljs-selector-tag">h1</span> &#123; <span class="hljs-keyword">@include</span> sexy-border(blue, <span class="hljs-number">2in</span>); &#125;<br></code></pre></td></tr></table></figure><p>转换成css为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-attribute">border-color</span>: blue;<br>  <span class="hljs-attribute">border-width</span>: <span class="hljs-number">1in</span>;<br>  <span class="hljs-attribute">border-style</span>: dashed; &#125;<br><br><span class="hljs-selector-tag">h1</span> &#123;<br>  <span class="hljs-attribute">border-color</span>: blue;<br>  <span class="hljs-attribute">border-width</span>: <span class="hljs-number">2in</span>;<br>  <span class="hljs-attribute">border-style</span>: dashed;<br>&#125;<br></code></pre></td></tr></table></figure><p>当我们不确定需要多少个参数的时候，我们可以使用可变参数，如</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-keyword">@mixin</span> box-shadow(<span class="hljs-variable">$shadows</span>...) &#123;<br>      -moz-<span class="hljs-attribute">box-shadow</span>: <span class="hljs-variable">$shadows</span>;<br>      -webkit-<span class="hljs-attribute">box-shadow</span>: <span class="hljs-variable">$shadows</span>;<br>      <span class="hljs-attribute">box-shadow</span>: <span class="hljs-variable">$shadows</span>;<br>&#125;<br><br><span class="hljs-selector-class">.shadows</span> &#123;<br>  <span class="hljs-keyword">@include</span> box-shadow(<span class="hljs-number">0px</span> <span class="hljs-number">4px</span> <span class="hljs-number">5px</span> <span class="hljs-number">#666</span>, <span class="hljs-number">2px</span> <span class="hljs-number">6px</span> <span class="hljs-number">10px</span> <span class="hljs-number">#999</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>转换成css为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.shadows</span> &#123;<br>  -moz-<span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0px</span> <span class="hljs-number">4px</span> <span class="hljs-number">5px</span> <span class="hljs-number">#666</span>, <span class="hljs-number">2px</span> <span class="hljs-number">6px</span> <span class="hljs-number">10px</span> <span class="hljs-number">#999</span>;<br>  -webkit-<span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0px</span> <span class="hljs-number">4px</span> <span class="hljs-number">5px</span> <span class="hljs-number">#666</span>, <span class="hljs-number">2px</span> <span class="hljs-number">6px</span> <span class="hljs-number">10px</span> <span class="hljs-number">#999</span>;<br>  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0px</span> <span class="hljs-number">4px</span> <span class="hljs-number">5px</span> <span class="hljs-number">#666</span>, <span class="hljs-number">2px</span> <span class="hljs-number">6px</span> <span class="hljs-number">10px</span> <span class="hljs-number">#999</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="sass的继承-extend"><a href="#sass的继承-extend" class="headerlink" title="sass的继承  @extend"></a>sass的继承  @extend</h2><p>如果两个样式几乎相同时，则@extend就显得很有用</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-class">.button-basic</span>  &#123;<br>  <span class="hljs-attribute">border</span>: none;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">15px</span> <span class="hljs-number">30px</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>&#125;<br><br><span class="hljs-selector-class">.button-report</span>  &#123;<br>  <span class="hljs-keyword">@extend</span> .button-basic;<br>  <span class="hljs-attribute">background-color</span>: red;<br>&#125;<br><br><span class="hljs-selector-class">.button-submit</span>  &#123;<br>  <span class="hljs-keyword">@extend</span> .button-basic;<br>  <span class="hljs-attribute">background-color</span>: green;<br>  <span class="hljs-attribute">color</span>: white;<br>&#125;<br></code></pre></td></tr></table></figure><p>转换成css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.button-basic</span>, <span class="hljs-selector-class">.button-report</span>, <span class="hljs-selector-class">.button-submit</span> &#123;<br>  <span class="hljs-attribute">border</span>: none;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">15px</span> <span class="hljs-number">30px</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>&#125;<br><br><span class="hljs-selector-class">.button-report</span>  &#123;<br>  <span class="hljs-attribute">background-color</span>: red;<br>&#125;<br><br><span class="hljs-selector-class">.button-submit</span>  &#123;<br>  <span class="hljs-attribute">background-color</span>: green;<br>  <span class="hljs-attribute">color</span>: white;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="sass函数"><a href="#sass函数" class="headerlink" title="sass函数"></a>sass函数</h2><p><a href="https://www.runoob.com/sass/sass-functions.html">Sass 函数 | 菜鸟教程 (runoob.com)</a></p><p>太多了可自行到这里查找</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sass</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts</title>
    <link href="/super_zhu/2023/03/03/ts/"/>
    <url>/super_zhu/2023/03/03/ts/</url>
    
    <content type="html"><![CDATA[<h1 id="ts的安装"><a href="#ts的安装" class="headerlink" title="ts的安装"></a>ts的安装</h1><h2 id="ts自动编译"><a href="#ts自动编译" class="headerlink" title="ts自动编译"></a>ts自动编译</h2><p>在安装好ts后，在终端输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tsc -init<br></code></pre></td></tr></table></figure><p>会产生一个<strong>tsconfig.json</strong>文件</p><p>然后在文件中找到outDir选项，取消注释</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;outDir&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./js&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">//代表自动编译后产生的js文件生成在同一目录下的js目录</span><br></code></pre></td></tr></table></figure><h3 id="然后启动监视"><a href="#然后启动监视" class="headerlink" title="然后启动监视"></a>然后启动监视</h3><p>可以选择在终端输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tsc -w  //监视多个文件<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tsc 文件相对位置 -w //监视单个文件<br></code></pre></td></tr></table></figure><p>然后保存ts代码，就会自动编译</p><h2 id="ts的一些报错"><a href="#ts的一些报错" class="headerlink" title="ts的一些报错"></a>ts的一些报错</h2><h1 id="TS2307"><a href="#TS2307" class="headerlink" title="TS2307"></a>TS2307</h1><p> <strong>Cannot find module ‘.&#x2F;App.vue’ or its corresponding type declarations</strong></p><p>在刚创建ts+vue项目时，你在main.ts会发现导入app.vue报错那是因为ts根本不认识<code>.vue</code></p><p>所以在src下的<code>shims-vue.d.ts</code>文件（没有自己创建）下输入</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">declare</span> <span class="hljs-variable language_">module</span> <span class="hljs-string">&#x27;*.vue&#x27;</span> &#123;<br>    <span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> &#123; <span class="hljs-title class_">DefineComponent</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-attr">component</span>: <span class="hljs-title class_">DefineComponent</span>&lt;&#123;&#125;, &#123;&#125;, <span class="hljs-built_in">any</span>&gt;<br>    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> component<br>  &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/super_zhu/2023/01/10/%E5%AF%92%E5%81%87%E6%B8%85%E5%8D%95/"/>
    <url>/super_zhu/2023/01/10/%E5%AF%92%E5%81%87%E6%B8%85%E5%8D%95/</url>
    
    <content type="html"><![CDATA[<h1 id="寒假清单"><a href="#寒假清单" class="headerlink" title="寒假清单"></a>寒假清单</h1><h2 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h2><p>理解小程序生命周期函数，并且以代码实现验证 （理解它是什么时候执行）</p><p>了解小程序网络的api    wx.request，并且代码实现验证（为前后端交互做准备）</p><p>了解小程序的缓存的增删改查（有相应api，很简单的）</p><h2 id="js"><a href="#js" class="headerlink" title="js"></a>js</h2><ul><li>了解js对象，函数，方法（后两个差不多）</li><li>了解js异步，同步，要求学会js异步编程</li></ul><h2 id="其他（进阶）"><a href="#其他（进阶）" class="headerlink" title="其他（进阶）"></a>其他（进阶）</h2><ul><li>可以学习<a href="https://www.iconfont.cn/">iconfont-阿里巴巴矢量图标库</a>导入自己的项目</li><li>了解小程序colorui组件库的使用或者其他组件库的使用</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vue的一些基本语法</title>
    <link href="/super_zhu/2023/01/05/vue/"/>
    <url>/super_zhu/2023/01/05/vue/</url>
    
    <content type="html"><![CDATA[<h1 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h1><h2 id="容器的简单数据绑定"><a href="#容器的简单数据绑定" class="headerlink" title="容器的简单数据绑定"></a>容器的简单数据绑定</h2><p>el的第一种写法</p><p><img src="https://s2.loli.net/2023/03/18/2HlMaOV1tGBhXDr.png" alt="image.png"></p><h3 id="el还有另外一种绑定方法"><a href="#el还有另外一种绑定方法" class="headerlink" title="el还有另外一种绑定方法"></a>el还有另外一种绑定方法</h3><p><img src="https://s2.loli.net/2023/03/18/w43DNLgyYnv2pAK.png" alt="image-20230104194631071.png"></p><p>data的函数式写法</p><p><img src="https://s2.loli.net/2023/03/18/u9e3cDnYFvm4Lb7.png" alt="image-20230104194906893.png"></p><h2 id="v-bind让属性变成js变量"><a href="#v-bind让属性变成js变量" class="headerlink" title="v-bind让属性变成js变量"></a>v-bind让属性变成js变量</h2><p><img src="https://s2.loli.net/2023/03/18/BLXlIFgY5hx8cbP.png" alt="image.png"></p><ul><li>可以简写为 :</li></ul><h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><ul><li>v-bind是单向数据绑定（data流向页面）</li><li>v-model是双项数据绑定（就是页面数据改变，data也会改变 ）</li><li>v-model只能应用在表单类元素上，就是存在value那种（简写可以省略value）</li></ul><h2 id="Object-defineProperty（）"><a href="#Object-defineProperty（）" class="headerlink" title="Object.defineProperty（）"></a>Object.defineProperty（）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> object1 = &#123;&#125;;<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(object1, <span class="hljs-string">&#x27;property1&#x27;</span>, &#123;<br>  <span class="hljs-attr">value</span>: <span class="hljs-number">42</span>,<br>  <span class="hljs-attr">writable</span>: <span class="hljs-literal">false</span> <span class="hljs-comment">//控制属性可以被修改  最后一个是配置项</span><br>&#125;);<br><br>object1.<span class="hljs-property">property1</span> = <span class="hljs-number">77</span>;<br><span class="hljs-comment">// Throws an error in strict mode 默认不可以被遍历 </span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(object1.<span class="hljs-property">property1</span>);<br><span class="hljs-comment">// expected output: 42</span><br><br></code></pre></td></tr></table></figure><p>关于配置项更多属性前往</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">Object.defineProperty（） - JavaScript |多核 (mozilla.org)</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> number=<span class="hljs-number">18</span><br><br><span class="hljs-keyword">var</span> person=&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&quot;zhu&quot;</span><br>&#125;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(person,<span class="hljs-string">&#x27;age&#x27;</span>,&#123;<br><span class="hljs-title function_">get</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">return</span> number   <span class="hljs-comment">//每当我们读取person的时候都会返回number的实时数据 就是number改变 person里面也会改变</span><br>&#125;<br>    <span class="hljs-title function_">set</span>(<span class="hljs-params">value</span>)&#123;<br><span class="hljs-comment">//当age的值被调用的时候就会调用set  并且会返回修改值</span><br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>以上常常应用于vue的数据代理比如vue里的data里name和name的差别</p><h2 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件"></a>绑定事件</h2><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><p><img src="https://s2.loli.net/2023/03/18/8w6RoBg1PvhUJDV.png" alt="image-20230105121926564.png"></p><p>v-on：click也可以简写为@click</p><h4 id="点击传递数据"><a href="#点击传递数据" class="headerlink" title="点击传递数据"></a>点击传递数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//使用vue传递数据</span><br>@click=<span class="hljs-string">&quot;showinfo($event,66)&quot;</span><br><span class="hljs-comment">//js</span><br><span class="hljs-title function_">showinfo</span>(<span class="hljs-params">event,num</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num) <span class="hljs-comment">//66</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><p>vue给的几种修饰符</p><p><img src="https://s2.loli.net/2023/03/18/GU2NjlPvp5Lrg31.png" alt="image-20230105123255552.png"></p><p>capture是把事件触发改成捕获阶段</p><p>使用方法是</p><p><img src="https://s2.loli.net/2023/03/18/aAwxyW3TOEDrId4.png" alt="image-20230105123320767.png"></p><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><ul><li>keydown按下去就触发</li><li>keyup按下去抬起来才触发</li></ul><p>vue给常用按键起的别名</p><p><img src="https://s2.loli.net/2023/03/18/25Ah8PEe6zHsKpO.png" alt="image.png"></p><p><img src="https://s2.loli.net/2023/03/18/Mcdn7rEDHhBIbwu.png" alt="image.png"></p><p>即只有按下相应按键才会触发相应方法</p><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><h3 id="methods实现"><a href="#methods实现" class="headerlink" title="methods实现"></a>methods实现</h3><p>函数可以作为一个参数使用</p><p><img src="https://s2.loli.net/2023/03/18/HRQCAnEhuaO8YzL.png" alt="image.png"></p><h3 id="computed计算属性的实现"><a href="#computed计算属性的实现" class="headerlink" title="computed计算属性的实现"></a>computed计算属性的实现</h3><p>在对象中调用get函数，当第一次调用的计算属性的时候，数据会进入缓存，数据再次变化的时候get才会再次被调用</p><p><img src="https://s2.loli.net/2023/03/18/QaZlvDP98cmKjU7.png" alt="image.png"></p><h3 id="计算属性简写"><a href="#计算属性简写" class="headerlink" title="计算属性简写"></a>计算属性简写</h3><p>可以直接写成函数</p><p><img src="https://s2.loli.net/2023/03/18/LXAjShpCuHlqbKI.png" alt="image.png"></p><h3 id="监视属性"><a href="#监视属性" class="headerlink" title="监视属性"></a>监视属性</h3><p>当ishot数据发生改变时，handler函数执行并且返回原来的值和更新后的值，也是可以监视计算属性</p><p><img src="https://s2.loli.net/2023/03/18/bK24QYaZR3BDJlp.png" alt="image.png"></p><h4 id="深度监视"><a href="#深度监视" class="headerlink" title="深度监视"></a>深度监视</h4><p><img src="https://s2.loli.net/2023/03/18/1WrgtYl8pGPLhSz.png" alt="image.png"></p><p>加上deep可以监视多级结构中属性的变化</p><p><strong>输入‘number.a’可以单独监视a属性</strong></p><h2 id="绑定样式"><a href="#绑定样式" class="headerlink" title="绑定样式"></a>绑定样式</h2><h3 id="calss样式绑定"><a href="#calss样式绑定" class="headerlink" title="calss样式绑定"></a>calss样式绑定</h3><p>字符串变量绑定</p><p><img src="https://s2.loli.net/2023/03/18/fDGhbAmB7vOJLPz.png" alt="image.png"></p><p>数组绑定</p><p><img src="https://s2.loli.net/2023/03/18/sghjludV4J7ExPb.png" alt="image.png"></p><p>对象绑定</p><p><img src="https://s2.loli.net/2023/03/18/BXbLV3aEpdZ8vFt.png" alt="image.png"></p><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><p><img src="https://s2.loli.net/2023/03/18/I4AcsjUunwBNh7v.png" alt="image.png"></p><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><p><img src="https://s2.loli.net/2023/03/18/7uTlasftye9nmJd.png" alt="image.png"></p><h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;e in arr&quot;</span> <span class="hljs-comment">//其中e代表数组的没一项  还要记得绑定key   如:key=&quot;e.id&quot; 也可以绑定index   :key=&quot;index&quot;</span><br><span class="hljs-comment">//可以直接&#123;&#123;e&#125;&#125;在html里使用</span><br></code></pre></td></tr></table></figure><h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><p><img src="https://s2.loli.net/2023/03/18/EPstu13LNeqG5wd.png" alt="image.png"></p><h3 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h3><p><img src="https://s2.loli.net/2023/03/18/lnVxGv7QMyrPiWE.png" alt="image.png"></p><p>对象绑定的key是对象的属性</p><p><strong>绑定index并不是好的选择</strong></p><h2 id="vue-set"><a href="#vue-set" class="headerlink" title="vue.set()"></a>vue.set()</h2><p>vue.set(target,key,val)</p><ul><li>target追加属性的对象</li><li>key追加属性的名字</li><li>val属性值</li></ul><p>如果使用该方法的是数组，那么key是元素下标</p><h2 id="vue自定义指令"><a href="#vue自定义指令" class="headerlink" title="vue自定义指令"></a>vue自定义指令</h2><p>在Vue的directives中定义指令</p><p>比如以下的v-big指令</p><p><img src="https://s2.loli.net/2023/03/18/A6lYeIiWbP8mLtO.png" alt="image.png"></p><p>在vue中</p><p><img src="https://s2.loli.net/2023/03/18/ML3YVvrwzd51BR7.png" alt="image.png"></p><p>完整的写法</p><p><img src="https://s2.loli.net/2023/03/18/Bl2giKYEhFmGHc1.png" alt="image.png"></p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h3 id="beforeCreate"><a href="#beforeCreate" class="headerlink" title="beforeCreate"></a>beforeCreate</h3><p>函数里面不能调用data和method</p><p><img src="https://s2.loli.net/2023/03/18/c9HsnidfhrvWSuZ.png" alt="image.png"></p><h2 id="created"><a href="#created" class="headerlink" title="created"></a>created</h2><p>可以调用data和method</p><h3 id="beforeMount"><a href="#beforeMount" class="headerlink" title="beforeMount"></a>beforeMount</h3><p>虚拟dom插入页面之前，对dom的操作不奏效</p><h3 id="mounted"><a href="#mounted" class="headerlink" title="mounted"></a>mounted</h3><p>就是第一次渲染完成</p><p><img src="https://s2.loli.net/2023/03/18/ucjKxmFlz6qAX8D.png" alt="image.png">****</p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="脚手架"><a href="#脚手架" class="headerlink" title="脚手架"></a>脚手架</h3><h4 id="在终端输入"><a href="#在终端输入" class="headerlink" title="在终端输入"></a>在终端输入</h4><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> install -g @vue/cli<br><span class="hljs-regexp">//</span>再切换到你想要创建的目录<br>vue create 文件名<br>进入文件夹中，启动目录<br><span class="hljs-built_in">npm</span> run serve<br></code></pre></td></tr></table></figure><h3 id="创建vue文件"><a href="#创建vue文件" class="headerlink" title="创建vue文件"></a>创建vue文件</h3><p><img src="https://s2.loli.net/2023/03/18/ugMq2ep8LKnl5dm.png" alt="image.png">)</p><h4 id="man-js"><a href="#man-js" class="headerlink" title="man.js"></a>man.js</h4><p><img src="https://s2.loli.net/2023/03/18/1wYX8Wv4yksbiTl.png" alt="image.png"></p><h2 id="脚手架的个性化"><a href="#脚手架的个性化" class="headerlink" title="脚手架的个性化"></a>脚手架的个性化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">//脚手架的默认配置导出js文件<br>vue inspect &gt; output.js<br></code></pre></td></tr></table></figure><h2 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h2><p><img src="https://s2.loli.net/2023/03/18/NQsaPf6F1mbYkrS.png" alt="image.png"></p><h2 id="scoped样式"><a href="#scoped样式" class="headerlink" title="scoped样式"></a>scoped样式</h2><p><img src="https://s2.loli.net/2023/03/18/yolNbxnHGEaBhMK.png" alt="image.png"></p><p>这样子就不会出现样式冲突的情况</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图的最小生成树Prim算法</title>
    <link href="/super_zhu/2022/12/05/%E5%9B%BE%E7%9A%84%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91Prim%E7%AE%97%E6%B3%95/"/>
    <url>/super_zhu/2022/12/05/%E5%9B%BE%E7%9A%84%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91Prim%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="图的最小生成树Prim算法"><a href="#图的最小生成树Prim算法" class="headerlink" title="图的最小生成树Prim算法"></a>图的最小生成树Prim算法</h1><h2 id="什么是最小生成树"><a href="#什么是最小生成树" class="headerlink" title="什么是最小生成树"></a>什么是最小生成树</h2><p>最小生成树按通俗点来说就是图的一个子图，但不同的是这个图包含有<strong>原图的全部节点</strong>，但<strong>边的权值之和就尽量小</strong></p><p>如果是非带权图那么他只有生成树并没有最小生树，如图</p><p><img src="https://pic3.zhimg.com/v2-a89c87ebaf244377c48db2516df35096_r.jpg"></p><p>但最小生成树应该是这样子的</p><p><img src="https://pic1.zhimg.com/v2-b0b4cf080ce7b65c245bf5360fd576dc_r.jpg"></p><p>包含全部顶点但边的权值最小</p><p><strong>不管是生成树还是最小生成树都不允许图中有环路 ！ ！ ！</strong></p><h2 id="普里姆算法-prim算法"><a href="#普里姆算法-prim算法" class="headerlink" title="普里姆算法-prim算法"></a>普里姆算法-prim算法</h2><blockquote><p>Prim算法就是图的最小生成树算法之一，Prim 算法是一种求解加权无向连通图的 MST 问题的贪心算法。它能找出一个边的子集，使得其构成的树包含图中所有顶点，且边的权值之和最小。</p><p>Prim算法以图的顶点为基础，从首个初始顶点，寻找到达其他顶点权值最小的边，并把该顶点加入到“已到达顶点”的集合中，此时，这个集合就是这个图的最小生成树</p></blockquote><p>prim算法的使用要点：</p><ul><li>使用一个一维数组记录节点</li><li>节点上的值是是父节点的序号，而下标的值是代表这个节点的序号</li><li>第一个节点总是作为根节点（即序号为0的节点），因为没有父节点其值为-1</li></ul><p>如有下图那么一个图</p><p>首先根节点进入数组，其值为-1</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8920d6711607407c961754d1ca3b9d97~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image"></p><p>此时从根节点出发寻找权值最小的边，及其到达的节点，发现和节点2的边的权值更小，将其加入数组中,因为其父节点是根节点，所以值是根节点的下标，值为自己的序号</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/862111f392b247299909702cdeba74bd~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image"></p><p>在从数组中已经加入的所有节点出发发现2和4的节点的边的权值最小</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/177ba1da1b1d430f895cc26be81b4c37~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt="Prim-Unit-6.png"></p><p>以此循环往复</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/55be2db34beb412a8941dac7d00b409c~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image"><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f24ce28542f541139b39a8634384d9d3~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image"></p><p>此时全部顶点已经进入数组，数组就是这个图的最小生成树</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>子网内的数据截获</title>
    <link href="/super_zhu/2022/12/04/%E5%AD%90%E7%BD%91%E5%86%85%E7%9A%84%E6%95%B0%E6%8D%AE%E6%88%AA%E8%8E%B7/"/>
    <url>/super_zhu/2022/12/04/%E5%AD%90%E7%BD%91%E5%86%85%E7%9A%84%E6%95%B0%E6%8D%AE%E6%88%AA%E8%8E%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="子网内的数据截获"><a href="#子网内的数据截获" class="headerlink" title="子网内的数据截获"></a>子网内的数据截获</h1><p>我们先让电脑和手机在同一子网内，即同一网段</p><p>打开wireshark，输入过滤条件ip.src&#x3D;&#x3D;手机ip  然后发送一张图片</p><p><img src="https://s2.loli.net/2022/12/04/DjbQVcyZSX2AF17.png"></p><p>找到图片数据，然后选择追踪数据流，选择原始数据，然后保存后缀改为jpg</p><p><img src="https://s2.loli.net/2022/12/04/6rpZ5D7iRsyQGhB.png"></p><p>使用winhex打开图片</p><p><img src="https://s2.loli.net/2022/12/04/5RKYgO1iXT9Vh82.png"></p><p>jpg文件的数据头是FF D8，删除前面的数据再保存，此时就可以得到截获的图片</p><p><img src="https://s2.loli.net/2022/12/04/bnGAeYj3laUgrVc.png">****</p>]]></content>
    
    
    <categories>
      
      <category>网络渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透作业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一个好玩的签到打印</title>
    <link href="/super_zhu/2022/11/26/%E4%B8%80%E4%B8%AA%E5%A5%BD%E7%8E%A9%E7%9A%84%E7%AD%BE%E5%88%B0%E6%89%93%E5%8D%B0/"/>
    <url>/super_zhu/2022/11/26/%E4%B8%80%E4%B8%AA%E5%A5%BD%E7%8E%A9%E7%9A%84%E7%AD%BE%E5%88%B0%E6%89%93%E5%8D%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="一个好玩的签到打印"><a href="#一个好玩的签到打印" class="headerlink" title="一个好玩的签到打印"></a>一个好玩的签到打印</h1><p>想要实现一个指令实现签到签退并且以一种好玩的形式打印，比如</p><p><img src="https://s2.loli.net/2022/11/26/SREd9y7WCOchK18.png" alt="image.png"></p><p>只需要以下几步：</p><ol><li>学习bash脚本语言，并且学会使用curl，cut，awk，|(管道符)的使用</li><li>配合相关软件，实现有趣的打印，这里的打印软件我使用的是cowsay和使打印渐变色的软件lolcat</li><li>设置快捷命令（按自己需求设置）</li></ol><blockquote><p>这个博客有一些好玩的打印软件的介绍<a href="https://blog.csdn.net/qq_38410494/article/details/119068145">(167条消息) 有趣的 Linux 命令行软件_zacharyzlj的博客-CSDN博客</a></p></blockquote><h2 id="开始编写"><a href="#开始编写" class="headerlink" title="开始编写"></a>开始编写</h2><p><strong>先说bash语言是什么</strong></p><p><strong>用我的话来说：bash就是一个shell程序，bash语言可以按你定好的逻辑自动对系统进行操作</strong></p><p>话不多说，直接上操作</p><p>先去测试的目录内，新建bash文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">touch test.sh<br></code></pre></td></tr></table></figure><p>然后再使用编辑器打开它，它的第一行一般都是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br></code></pre></td></tr></table></figure><p>其中#！的意思是表明文件类型，&#x2F;bin&#x2F;bash表示bash程序，那这一行表示他是一个bash程序的文件</p><p>然后再学习相应知识，开始编写程序就好</p><p>以下是我的签退程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>msg=$(curl -s -d <span class="hljs-string">&#x27;&#123;&quot;userId&quot;: &quot;2100301838&quot;&#125;&#x27;</span> -H <span class="hljs-string">&quot;Content-Type:application/json&quot;</span> https://at.kexie.space/api/user/signOut)<br><span class="hljs-comment">#使用msg接收返回的数据</span><br>results=$(<span class="hljs-built_in">echo</span> <span class="hljs-variable">$msg</span> | awk <span class="hljs-string">&#x27;BEGIN&#123;FS=&quot;code&quot;&#125;END&#123;print $2&#125;&#x27;</span>| awk <span class="hljs-string">&#x27;BEGIN&#123;FS=&quot;,&quot;&#125;END&#123;print $1&#125;&#x27;</span>| awk <span class="hljs-string">&#x27;BEGIN&#123;FS=&quot;:&quot;&#125;END&#123;print $2&#125;&#x27;</span>)<br><span class="hljs-comment">#对返回的code进行截取到results，以此判断是否签退成功</span><br><span class="hljs-comment">#以下是定义一个签退成功的函数out_su()</span><br><span class="hljs-function"><span class="hljs-title">out_su</span></span>()&#123;<br><span class="hljs-comment">#截取签到总时间</span><br>        totaltime=$(<span class="hljs-built_in">echo</span> <span class="hljs-variable">$msg</span> | awk <span class="hljs-string">&#x27;BEGIN&#123;FS=&quot;totalTime&quot;&#125;END&#123;print $2&#125;&#x27;</span> | awk <span class="hljs-string">&#x27;BEGIN&#123;FS=&quot;,&quot;&#125;END&#123;print $1&#125;&#x27;</span> | awk <span class="hljs-string">&#x27;BEGIN&#123;FS=&quot;\&quot;&quot;&#125;END&#123;print $3&#125;&#x27;</span>)<br><span class="hljs-comment">#截取本次签到时间</span><br>        accumulatedTime=$(<span class="hljs-built_in">echo</span> <span class="hljs-variable">$msg</span> | awk <span class="hljs-string">&#x27;BEGIN&#123;FS=&quot;accumulatedTime&quot;&#125;END&#123;print $2&#125;&#x27;</span> | awk <span class="hljs-string">&#x27;BEGIN&#123;FS=&quot;,&quot;&#125;END&#123;print $1&#125;&#x27;</span> | awk <span class="hljs-string">&#x27;BEGIN&#123;FS=&quot;\&quot;&quot;&#125;END&#123;print $3&#125;&#x27;</span>)<br><span class="hljs-comment">#执行以下打印命令</span><br>        cowsay -f dragon <span class="hljs-string">&quot;芜湖 本次摸鱼<span class="hljs-variable">$accumulatedTime</span>小时  本周共<span class="hljs-variable">$totaltime</span>小时&quot;</span> | lolcat<br>&#125;<br><span class="hljs-comment">#签退失败函数</span><br><span class="hljs-function"><span class="hljs-title">out_err</span></span>()&#123;<br>cowsay -f skeleton <span class="hljs-string">&quot;你小子不会忘记签到了吧&quot;</span> | lolcat<br>&#125;<br><span class="hljs-comment">#根据是否成功调用不同函数</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$results</span> -eq <span class="hljs-string">&quot;0&quot;</span> ];<br><span class="hljs-keyword">then</span><br>        out_su<br><br><span class="hljs-keyword">else</span><br>        out_err<br><span class="hljs-keyword">fi</span><br><br></code></pre></td></tr></table></figure><p>以下是效果</p><p><img src="https://s2.loli.net/2022/11/26/SREd9y7WCOchK18.png" alt="image.png"></p><h2 id="配合其他软件打印"><a href="#配合其他软件打印" class="headerlink" title="配合其他软件打印"></a>配合其他软件打印</h2><p>其实就用了lolcat和cowsay，这两个软件都很容易使用，可以对照上面注释使用，更详细可以浏览器搜索，没什么好说的</p><h2 id="设置快捷命令"><a href="#设置快捷命令" class="headerlink" title="设置快捷命令"></a>设置快捷命令</h2><p>因为当我们不在签到文件的目录时总是要敲长长的路径打开很不方便，所以我们可以设置快捷命令快速下班哈哈哈</p><p>其实很简单，只需要通过alias命令注册就好</p><p>比如我想进入用户Ubuntu的目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">alias</span> cdu=<span class="hljs-string">&#x27;cd /home/ubuntu&#x27;</span><br></code></pre></td></tr></table></figure><p>将上述设置写到home目录下的相应用户目录的.bashrc文件中（**~&#x2F;.bashrc**）的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># some more ls aliases</span><br><span class="hljs-built_in">alias</span> ll=<span class="hljs-string">&#x27;ls -alF&#x27;</span><br><span class="hljs-built_in">alias</span> la=<span class="hljs-string">&#x27;ls -A&#x27;</span><br><span class="hljs-built_in">alias</span> l=<span class="hljs-string">&#x27;ls -CF&#x27;</span><br></code></pre></td></tr></table></figure><p>跟着写上去就好</p><p>然后再运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source ~/.bashrc<br></code></pre></td></tr></table></figure><p>就OK了</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ubuntu</tag>
      
      <tag>瞎搞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kali虚拟机与物理机的IP关系</title>
    <link href="/super_zhu/2022/11/26/kali%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%92%8C%E7%89%A9%E7%90%86%E6%9C%BA%E7%9A%84ip%E5%85%B3%E7%B3%BB/"/>
    <url>/super_zhu/2022/11/26/kali%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%92%8C%E7%89%A9%E7%90%86%E6%9C%BA%E7%9A%84ip%E5%85%B3%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="kali虚拟机和物理机的ip关系"><a href="#kali虚拟机和物理机的ip关系" class="headerlink" title="kali虚拟机和物理机的ip关系"></a>kali虚拟机和物理机的ip关系</h1><h2 id="nat模式下"><a href="#nat模式下" class="headerlink" title="nat模式下"></a>nat模式下</h2><p>两者的ip地址</p><p><img src="https://s2.loli.net/2022/11/26/D82F1ZKboaNf3hG.png"></p><h2 id="桥接模式下"><a href="#桥接模式下" class="headerlink" title="桥接模式下"></a>桥接模式下</h2><p><img src="https://s2.loli.net/2022/11/26/CQFGVdsHn3PoyiM.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>NAT模式下，物理主机与kali虚拟主机的IP并不在同一网段下；桥接模式下，物理主机与kali虚拟主机IP同属于一个网段。</p>]]></content>
    
    
    <categories>
      
      <category>网络渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透作业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu部署-使用docker配置mysql</title>
    <link href="/super_zhu/2022/11/22/ubuntu%E9%83%A8%E7%BD%B2-docker-%E9%85%8D%E7%BD%AEmysql/"/>
    <url>/super_zhu/2022/11/22/ubuntu%E9%83%A8%E7%BD%B2-docker-%E9%85%8D%E7%BD%AEmysql/</url>
    
    <content type="html"><![CDATA[<h1 id="使用docker配置mysql"><a href="#使用docker配置mysql" class="headerlink" title="使用docker配置mysql"></a>使用docker配置mysql</h1><h2 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h2><p>如果本机本身就运行有mysql，请运行以下命令关闭服务、</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo service mysql stop<br></code></pre></td></tr></table></figure><p>不然可能会有端口映射失败的问题</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo docker <span class="hljs-built_in">run</span> -itd --name mysqldb -p 3306:3306 -e <span class="hljs-attribute">MYSQL_ROOT_PASSWORD</span>=<span class="hljs-string">&quot;your password&quot;</span> mysql:latest<br></code></pre></td></tr></table></figure><ul><li>运行时得带上标签:latest不然会报错，具体是什么原因我也不清楚</li><li>-e表示设置环境变量得意思，MYSQL_ROOT_PASSWORD  在这里是为root用户设置密码</li><li>-p表示将容器端口映射到主机端口</li></ul><blockquote><p>想要了解docker run 命令更多可选项可来<a href="https://docs.docker.com/engine/reference/commandline/run/">码头工人运行|码头工人文档 (docker.com)</a></p></blockquote><h2 id="配置远程连接"><a href="#配置远程连接" class="headerlink" title="配置远程连接"></a>配置远程连接</h2><p>进入容器后，登录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mysql -u root -p<br></code></pre></td></tr></table></figure><p>再输入密码</p><p>再给远程主机配置一个账户用于连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE USER &#x27;用户名&#x27;@&#x27;IP地址或者域名&#x27;  IDENTIFIED BY &#x27;*password*&#x27;;---创建用户<br>GRANT ALL  ON *.*  TO &#x27;用户名&#x27;@&#x27;主机IP地址&#x27;  WITH GRANT OPTION;---赋予权限<br></code></pre></td></tr></table></figure><p>然后再进行相应连接即可</p>]]></content>
    
    
    <categories>
      
      <category>服务器部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ubuntu</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu部署-docker的简单使用</title>
    <link href="/super_zhu/2022/11/20/ubuntu%E9%83%A8%E7%BD%B2-docker/"/>
    <url>/super_zhu/2022/11/20/ubuntu%E9%83%A8%E7%BD%B2-docker/</url>
    
    <content type="html"><![CDATA[<h1 id="ubuntu部署-docker的简单使用"><a href="#ubuntu部署-docker的简单使用" class="headerlink" title="ubuntu部署-docker的简单使用"></a>ubuntu部署-docker的简单使用</h1><h2 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h2><p><strong>我这里使用的是手动安装</strong></p><h3 id="先卸载旧版本的dockers"><a href="#先卸载旧版本的dockers" class="headerlink" title="先卸载旧版本的dockers"></a>先卸载旧版本的dockers</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get remove docker docker-engine docker.io containerd runc<br></code></pre></td></tr></table></figure><h3 id="使用dockers仓库安装"><a href="#使用dockers仓库安装" class="headerlink" title="使用dockers仓库安装"></a>使用dockers仓库安装</h3><p>首次安装需要先在Ubuntu的源上添加dockers官方的源</p><h4 id="设置仓库（dockers源）"><a href="#设置仓库（dockers源）" class="headerlink" title="设置仓库（dockers源）"></a>设置仓库（dockers源）</h4><p>更新一下Ubuntu的apt的软件包索引</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get update<br></code></pre></td></tr></table></figure><p>安装apt依赖包，用于HTTPS获取仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install \<br>    apt-transport-https \<br>    ca-certificates \<br>    curl \<br>    gnupg-agent \<br>    software-properties-common<br></code></pre></td></tr></table></figure><p>添加 Docker 的官方 GPG 密钥：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add -<br></code></pre></td></tr></table></figure><p>验证你是否拥有带有指纹的密钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"> sudo apt-key fingerprint 0EBFCD88<br>   <br>pub   rsa4096 2017-02-22 [SCEA]<br>      9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88<br>uid           [ unknown] Docker Release (CE deb) &lt;docker@docker.com&gt;<br>sub   rsa4096 2017-02-22 [S]<br></code></pre></td></tr></table></figure><p>使用以下指令在源那里加上仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo add-apt-repository \<br>   &quot;deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/ \<br><span class="hljs-meta prompt_">  $</span><span class="language-bash">(lsb_release -cs) \</span><br><span class="language-bash">  stable<span class="hljs-string">&quot;</span></span><br></code></pre></td></tr></table></figure><p>再更新apt索引</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get update<br></code></pre></td></tr></table></figure><p>直接安装最新版dockers</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install docker-ce docker-ce-cli containerd.io<br></code></pre></td></tr></table></figure><h4 id="测试是否安装成功"><a href="#测试是否安装成功" class="headerlink" title="测试是否安装成功"></a>测试是否安装成功</h4><p>执行以下命令，打印以下信息则是成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo docker run hello-world<br><br>Unable to find image &#x27;hello-world:latest&#x27; locally<br>latest: Pulling from library/hello-world<br>1b930d010525: Pull complete                                                                                                                                  Digest: sha256:c3b4ada4687bbaa170745b3e4dd8ac3f194ca95b2d0518b417fb47e5879d9b5f<br>Status: Downloaded newer image for hello-world:latest<br><br><br>Hello from Docker!<br>This message shows that your installation appears to be working correctly.<br><br><br>To generate this message, Docker took the following steps:<br> 1. The Docker client contacted the Docker daemon.<br> 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.<br>    (amd64)<br> 3. The Docker daemon created a new container from that image which runs the<br>    executable that produces the output you are currently reading.<br> 4. The Docker daemon streamed that output to the Docker client, which sent it<br>    to your terminal.<br><br><br>To try something more ambitious, you can run an Ubuntu container with:<br><span class="hljs-meta prompt_"> $ </span><span class="language-bash">docker run -it ubuntu bash</span><br><br><br>Share images, automate workflows, and more with a free Docker ID:<br> https://hub.docker.com/<br><br><br>For more examples and ideas, visit:<br> https://docs.docker.com/get-started/<br></code></pre></td></tr></table></figure><h3 id="其他安装方式"><a href="#其他安装方式" class="headerlink" title="其他安装方式"></a>其他安装方式</h3><p>需要其他安装方式则可前往<a href="https://www.runoob.com/docker/ubuntu-docker-install.html">Ubuntu Docker 安装 | 菜鸟教程 (runoob.com)</a></p><p>或者是自行查找</p><h2 id="对于docker的使用"><a href="#对于docker的使用" class="headerlink" title="对于docker的使用"></a>对于docker的使用</h2><p><strong>本文只做docker的基础操作介绍</strong></p><h3 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h3><p>我们都知道镜像是用来创建容器的那我们怎么样获取镜像和用镜像来生成容器和一些操作的那么接下来就是介绍一些关于镜像的一些操作</p><h4 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h4><p><strong>建议使用<code>docker pull</code></strong> <strong>的方式获取</strong></p><p>其命令格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo docker pull [OPTIONS] NAME[:TAG|@DIGEST]<br></code></pre></td></tr></table></figure><p>意思就是在docker源那里拉取相应的镜像</p><ul><li><p>name：就是要安装的镜像名字，若如果没有以下两个标签则是以<code>:latest</code>如<code>docker pull ubuntu</code>默认为<code>docker pull ubuntu:latest</code></p></li><li><p>tag：就是获取这个镜像相应版本的最新版，比如<code>sudo docker pull ubuntu:18.04</code>就是拉取系统版本为18.04的ubuntu镜像最新版</p></li><li><p>digest：表示是拉取指定版本的镜像系统，如 <code>sudo docker  pull ubuntu@sha256:45b23dee08af5e43a7fea6c4cf9c25ccf269ee113168c19722f87876677c5cb2</code></p></li></ul><h4 id="docker-run"><a href="#docker-run" class="headerlink" title="docker run"></a>docker run</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo docker run [OPTIONS] IMAGE [COMMAND] [ARG...]<br></code></pre></td></tr></table></figure><p>其实docker run 命令就是下载一个本地没有的镜像，并且创建一个容器</p><p>例如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo docker run --rm  -it -d --gpus all --name test  ubuntu /bin/bash <br></code></pre></td></tr></table></figure><ul><li>以Ubuntu镜像创建一个名为test的容器</li><li>–rm 表示退出这个容器后自动移除这个容器</li><li>-d是指容器启动后以后台分离模式运行，默认会在前台模式运行，</li><li>-t和-i和&#x2F;bin&#x2F;bash,加起来表示使用bash创建一个伪终端，进入容器交互模式</li><li>gpus all 表示对于该容器，开启gpu支持，并且所有GPU都可用</li></ul><blockquote><p><a href="https://so.csdn.net/so/search?q=Docker&spm=1001.2101.3001.7020">Docker</a>容器后台运行,就必须有一个前台进程！</p><p>你如果执行sudo docker run -d –name test ubuntu ，虽然-d表示容器在后台挂起但事实上你会发现并不会在后台挂起，因为主线程任务已经执行完，而容器也自动关闭了</p><p>所以，sudo docker -itd –name test ubuntu 可以解决这个问题</p></blockquote><h4 id="查看镜像和容器"><a href="#查看镜像和容器" class="headerlink" title="查看镜像和容器"></a>查看镜像和容器</h4><p>查看镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo docker images<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看本机已有的镜像</span><br></code></pre></td></tr></table></figure><p>查看容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo docker ps <br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看正在运行的容器信息</span><br>sudo docker ps -a<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看全部容器信息</span><br></code></pre></td></tr></table></figure><h4 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo docker rmi [OPTIONS] IMAGE [IMAGE...]<br></code></pre></td></tr></table></figure><p>支持删除多种镜像</p><ul><li>使用image id ：<code>sudo docker rmi fd484f19954f</code>    –这个image id可以直接<code>sudo docker images</code>查看镜像id</li><li>使用tag：<code>docker rmi test:latest</code></li><li>使用DIGEST： <code>docker rmi localhost:5000/test/busybox@sha256:cbbf2f9a99b47fc460d422812b6a5adff7dfee951d8fa2e4a98caa0382cfbdbf</code></li></ul><h3 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h3><p>容器就是以镜像为只读模板创建的</p><h4 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h4><p>前面已经说了可以以<code>docker run</code>来创建容器这里就不多说了</p><h4 id="进入容器交互"><a href="#进入容器交互" class="headerlink" title="进入容器交互"></a>进入容器交互</h4><p>要进入容器分两种情况</p><ul><li>进入已经后台分离模式下运行的容器内</li><li>已经关闭的容器内</li></ul><h5 id="后台分离模式下运行的容器"><a href="#后台分离模式下运行的容器" class="headerlink" title="后台分离模式下运行的容器"></a>后台分离模式下运行的容器</h5><p>对于已经启动的容器有两个命令进入 <code>attach</code> 和 <code>exec</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo docker exec -it test bash<br><span class="hljs-meta prompt_">#</span><span class="language-bash">进入一个名为<span class="hljs-built_in">test</span>的容器并打开伪终端</span><br>sudo docker attach  <br><span class="hljs-meta prompt_">#</span><span class="language-bash">attach不能使用-it bash</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">进入一个名为<span class="hljs-built_in">test</span>的容器并打开伪终端</span><br></code></pre></td></tr></table></figure><p>然后你在退出容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">exit<br></code></pre></td></tr></table></figure><p>这个时候你会发现，当你以exec进入容器后退出容器并不会关闭而attach则相反</p><h5 id="关闭的容器"><a href="#关闭的容器" class="headerlink" title="关闭的容器"></a>关闭的容器</h5><p>关闭的容器当然是先启动再进入咯</p><p>重启容器的方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo docker restart 容器名或者容器id<br></code></pre></td></tr></table></figure><p>启动容器的方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo docker start 容器名或者容器id<br></code></pre></td></tr></table></figure><p><strong>不管是重启还是启动，容器都是以后台分离的模式运行</strong></p><p>然后再进入容器内即可</p><h4 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h4><p>都是基于<code>docker  rm</code>来进行</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">docker rm <span class="hljs-comment">[OPTIONS]</span> <span class="hljs-keyword">CONTAINER</span> <span class="hljs-comment">[CONTAINER...]</span><br></code></pre></td></tr></table></figure><p>例如删除ubuntu-test2这个容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo docker rm ubuntu-test2<br></code></pre></td></tr></table></figure><h4 id="容器的停止和关闭和暂停"><a href="#容器的停止和关闭和暂停" class="headerlink" title="容器的停止和关闭和暂停"></a>容器的停止和关闭和暂停</h4><p>停止</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo docker stop test<br><span class="hljs-meta prompt_">#</span><span class="language-bash">也可以加入参数-t，表示在一定时间内无法关闭则强制关闭，默认时间为10s</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">比如sudo docker stop -t=20 <span class="hljs-built_in">test</span></span><br></code></pre></td></tr></table></figure><p>关闭</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo docker kill test<br><span class="hljs-meta prompt_">#</span><span class="language-bash">直接关闭容器</span><br></code></pre></td></tr></table></figure><p>暂停</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo docker pause test<br><span class="hljs-meta prompt_">#</span><span class="language-bash">暂停运行</span><br>sudo docker unpause test<br><span class="hljs-meta prompt_">#</span><span class="language-bash">恢复运行</span><br></code></pre></td></tr></table></figure><ul><li>stop，kill和pause的差别是，stop，kill让容器停止而pause则是让容器挂起</li></ul>]]></content>
    
    
    <categories>
      
      <category>服务器部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ubuntu</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>拓扑排序的简单介绍</title>
    <link href="/super_zhu/2022/11/08/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    <url>/super_zhu/2022/11/08/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h1><h2 id="关于拓扑排序"><a href="#关于拓扑排序" class="headerlink" title="关于拓扑排序"></a>关于拓扑排序</h2><p>拓扑排序通俗点来说就是对于一个有向无环图(DAG)来说，不断输出其入度为0的节点直到不存在，每个节点输出一次且仅有一次</p><blockquote><p><strong>拓扑排序用官方的话来说就是</strong>：对一个有向无环图(DAG)G进行拓扑排序，是将G中所有顶点排成一个线性序列，使得图中任意一对顶点u和v，若边&lt;u,v&gt;∈E(G)，则u在线性序列中出现在v之前。通常，这样的线性序列称为满足拓扑次序(Topological Order)的序列，简称拓扑序列。简单的说，由某个集合上的一个偏序得到该集合上的一个全序，这个操作称之为拓扑排序。</p></blockquote><h2 id="执行步骤"><a href="#执行步骤" class="headerlink" title="执行步骤"></a>执行步骤</h2><p>拓扑排序主要步骤，也就主要循环两部分到不存在入度为零的顶点为止</p><ul><li>选择一个入度为零的顶点输出</li><li>在<code>AOV</code>网中删除这个顶点及其出边</li></ul><p>输出结束后，除非还有回路，否则其输出的顶点序列就是拓扑排序</p><blockquote><p>AOV网其实就是有向无回路图，就是DAG</p></blockquote><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p>对于以下图来说</p><p><img src="https://img-blog.csdnimg.cn/20210428200929462.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUyMjkwNDM2,size_16,color_FFFFFF,t_70"></p><p>删除1和2顶点和其对于边后并且输出，并且以此类推</p><p><img src="https://img-blog.csdnimg.cn/20210428201000907.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUyMjkwNDM2,size_16,color_FFFFFF,t_70"></p><p><img src="https://img-blog.csdnimg.cn/2021042820100737.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUyMjkwNDM2,size_16,color_FFFFFF,t_70"></p><p><img src="https://img-blog.csdnimg.cn/20210428201017719.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUyMjkwNDM2,size_16,color_FFFFFF,t_70"></p><p><img src="https://img-blog.csdnimg.cn/202104282010288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUyMjkwNDM2,size_16,color_FFFFFF,t_70" alt="·"></p><p>其实对于输出的序列不唯一就看你自己怎么样设计栈的结构</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>这里使用邻接表实现，再利用栈实现入度为零的输出</p><p>使用作业的题目，<code>ABCDEF</code>对应下标从0开始慢慢增大</p><p><img src="https://s2.loli.net/2022/11/08/zgsZPYbNG32c86F.jpg"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXVEX 10</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> VerType;<span class="hljs-comment">//顶点值类型</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EdgeNode</span>&#123;</span><br><span class="hljs-type">int</span> adjvex;<span class="hljs-comment">//邻接点域，存储该顶点对应的下标</span><br><span class="hljs-type">int</span> weight;<span class="hljs-comment">//用于存储权值，对于非网图可以不需要</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EdgeNode</span>* <span class="hljs-title">next</span>;</span><span class="hljs-comment">//下一个结点</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">VertexNode</span>&#123;</span><br><span class="hljs-type">int</span> in;<span class="hljs-comment">//入度</span><br>VerType data;<span class="hljs-comment">//值</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EdgeNode</span>* <span class="hljs-title">firstedge</span>;</span><span class="hljs-comment">//邻接表头指针</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Graph</span>&#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">VertexNode</span> <span class="hljs-title">vers</span>[<span class="hljs-title">MAXVEX</span>];</span><br><span class="hljs-type">int</span> numVertexes, numEdges;<span class="hljs-comment">//顶点数和边数</span><br>&#125;;<br><br><span class="hljs-comment">/* 拓扑排序，若G没有回路，则输出拓扑排序序列并返回OK，若有回路返回ERROR */</span><br><span class="hljs-type">int</span>  <span class="hljs-title function_">TopologicalSort</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Graph* G)</span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EdgeNode</span>* <span class="hljs-title">e</span>;</span><br><span class="hljs-type">int</span> i, k, gettop;<br><span class="hljs-type">int</span> top = <span class="hljs-number">0</span>;<span class="hljs-comment">//栈指针下标</span><br><span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<span class="hljs-comment">//统计输出顶点个数</span><br><span class="hljs-type">int</span>* <span class="hljs-built_in">stack</span>;<span class="hljs-comment">//存储入度为0的顶点</span><br><span class="hljs-built_in">stack</span> = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(G-&gt;numVertexes * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br><br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i&lt;G-&gt;numVertexes;i++)<span class="hljs-comment">//遍历所有结点</span><br><span class="hljs-keyword">if</span>(G-&gt;vers[i].in == <span class="hljs-number">0</span>)<br><span class="hljs-built_in">stack</span>[++top] = i;<span class="hljs-comment">//将入度为0的顶点入栈</span><br><br><span class="hljs-keyword">while</span>(top != <span class="hljs-number">0</span>)&#123;<br>gettop = <span class="hljs-built_in">stack</span>[top--];<span class="hljs-comment">//出栈</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>,G-&gt;vers[gettop].data);<br>count++;<span class="hljs-comment">//统计输出顶点数</span><br><span class="hljs-keyword">for</span>(e=G-&gt;vers[gettop].firstedge; e; e = e-&gt;next)&#123;<br><span class="hljs-comment">//弧表遍历</span><br>k = e-&gt;adjvex;<br><span class="hljs-keyword">if</span>(!(--G-&gt;vers[k].in))<span class="hljs-comment">//将k号顶点邻接点的入度减1</span><br><span class="hljs-built_in">stack</span>[++top] = k;<span class="hljs-comment">//若为0则入栈，以便下次循环输出</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(count &lt; G-&gt;numVertexes)<span class="hljs-comment">//如果count小于顶点数，说明存在环</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">/* 图初始化 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">CreateGraph</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Graph* G)</span>&#123;<br><span class="hljs-type">int</span> i, m, n;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入顶点数和边数：\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,&amp;G-&gt;numVertexes, &amp;G-&gt;numEdges);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入顶点值：\n&quot;</span>);<br>    getchar();<span class="hljs-comment">//吃掉回车</span><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;G-&gt;numVertexes;i++)&#123;<br><span class="hljs-comment">//getchar();//吃掉回车</span><br>G-&gt;vers[i].data=getchar();<br>getchar();<br><span class="hljs-comment">//scanf(&quot;%c&quot;,&amp;G-&gt;vers[i].data);</span><br>&#125;<br><span class="hljs-comment">//初始化图头结点指针和入度值</span><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;G-&gt;numVertexes;i++)&#123;<br>G-&gt;vers[i].firstedge = <span class="hljs-literal">NULL</span>;<br>G-&gt;vers[i].in = <span class="hljs-number">0</span>;<span class="hljs-comment">//入度为0</span><br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入边：\n&quot;</span>);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;G-&gt;numEdges;i++)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,&amp;m, &amp;n);<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EdgeNode</span> *<span class="hljs-title">newNode</span> =</span> (<span class="hljs-keyword">struct</span> EdgeNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> EdgeNode));<br>newNode-&gt;next = G-&gt;vers[m].firstedge == <span class="hljs-literal">NULL</span> ? <span class="hljs-literal">NULL</span> : G-&gt;vers[m].firstedge;<br>newNode-&gt;adjvex = n;<br>G-&gt;vers[m].firstedge = newNode;<br>G-&gt;vers[n].in++;<span class="hljs-comment">//入度+1</span><br>&#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Graph</span> *<span class="hljs-title">G</span>=</span>(<span class="hljs-keyword">struct</span> Graph*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> Graph)) ;<br>CreateGraph(G);<br><span class="hljs-keyword">if</span>(TopologicalSort(G))&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;拓扑排序完成！\n&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;图存在环&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图的两种存储结构</title>
    <link href="/super_zhu/2022/11/07/%E5%9B%BE%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/"/>
    <url>/super_zhu/2022/11/07/%E5%9B%BE%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="图的两种存储结构"><a href="#图的两种存储结构" class="headerlink" title="图的两种存储结构"></a>图的两种存储结构</h1><h2 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h2><p><strong>图的邻接矩阵(Adjacency Matrix) 存储方式是用两个数组来表示图。一个一维数组存储图中顶点信息，一个二维数组(称为邻接矩阵)存储图中的边或弧的信息。</strong></p><ul><li><p>即有一个数组存储顶点</p></li><li><p>一个维数组存储各个顶点之间的关系，即是存储边的信息，比如权值</p></li><li><p>有向图和无向图的的矩阵存储不一样</p></li></ul><p>比如下图，假如有一个是有n个顶点的图，则邻接矩阵是一个n*n的方阵，以下定义</p><p><img src="https://s2.loli.net/2022/11/08/v89P2IeYEnOmZpr.png">)</p><h3 id="无向图和他的邻接矩阵"><a href="#无向图和他的邻接矩阵" class="headerlink" title="无向图和他的邻接矩阵"></a>无向图和他的邻接矩阵</h3><p><img src="https://s2.loli.net/2022/11/08/PnXkO6RavKJCDIT.png"></p><ul><li>比如v1的顶点入度为1+1&#x3D;2</li><li>求顶点v i 的所有邻接点就是将矩阵中第i行元素扫描一遍， A [ i ] [ j ] &#x3D; 1就是邻接点</li><li>看vi是否和vj相连接，直接看是否A[i] [j]&#x3D;1或者A[j] [i]&#x3D;1都可以</li></ul><h3 id="有向图和它的邻接矩阵"><a href="#有向图和它的邻接矩阵" class="headerlink" title="有向图和它的邻接矩阵"></a>有向图和它的邻接矩阵</h3><p>有向图的矩阵并不是对称矩阵，看下图</p><p><img src="https://s2.loli.net/2022/11/08/yiD76uFmIAQkpeb.png"></p><ul><li>因为是有向图，所以入度和出度并不相同，比如v1的出度看数组的第一行不为一的数目，而入度则是看第一列不为一的数目，所以入度为1而出度为2</li><li>判断顶点v i到v j  是否存在弧，只需要查找矩阵中A [ i ] [ j ]是否为1即可</li></ul><h3 id="对于带权值的有向图"><a href="#对于带权值的有向图" class="headerlink" title="对于带权值的有向图"></a>对于带权值的有向图</h3><p>vi和vj之间有链接的话，则相应的A[i] [j]&#x3D;权值，即看下图</p><p><img src="https://s2.loli.net/2022/11/08/c7Pf5DkXNQyIR13.png"></p><ul><li><p>相连的话，相对应的A[i] [j]则用权值表示</p></li><li><p>如果不相连则用<br>$$<br>\infty<br>$$</p></li></ul><p>表示以下是一个图的简单定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxVertexNum 100<span class="hljs-comment">//顶点数目的最大值</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> VertexType;<span class="hljs-comment">//顶点的数据类型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> EdgeType;<span class="hljs-comment">//带权图中边上权值的数据类型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>VertexType Vex[MaxVertexNum];<span class="hljs-comment">//顶点表</span><br>EdgeType Edge[MaxVertexNum][MaxVertexNum];<span class="hljs-comment">//邻接矩阵，边表</span><br><span class="hljs-type">int</span> vexnum, arcnum;<span class="hljs-comment">//图的当前顶点数和边数</span><br>&#125;MGraph;<br><br></code></pre></td></tr></table></figure><h2 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h2><p>当一个图的边数太少用邻接矩阵的方式存储，太浪费空间，如下</p><p><img src="https://s2.loli.net/2022/11/08/kpWIRwFxfZGVOsq.png"></p><ul><li><p>邻接表对于每一个顶点vi都建立了一个单链表，链表每个节点都存储着与vi相连的顶点信息，比如v1的单链表中有一个节点存储着v2的信息，则代表v1—–&gt;v2(当为无向图时表示v1————v2)</p></li><li><p>所以邻接表共有两种表结构 </p><ol><li>一个是顶点表存储顶点信息，同时存储着指向相应链表的指针，</li><li>一个是边表存储边的信息，存储被指向的节点和权值</li></ol></li></ul><p>如下图</p><p><img src="https://s2.loli.net/2022/11/08/BAS98Xcmj6E1NUk.png"></p><p>对于无向图的实例如下</p><p><img src="https://s2.loli.net/2022/11/08/zCBDghNbaWlo6jG.png"></p><p>对于有向图的实例如下</p><p><img src="https://s2.loli.net/2022/11/08/5FZKvoYk7TngyI4.png"></p><p>而代码实例如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXVEX 100<span class="hljs-comment">//图中顶点数目的最大值</span></span><br>type <span class="hljs-type">char</span> VertexType;<span class="hljs-comment">//顶点类型应由用户定义</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> EdgeType;<span class="hljs-comment">//边上的权值类型应由用户定义</span><br><span class="hljs-comment">/*边表结点*/</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EdgeNode</span>&#123;</span><br><span class="hljs-type">int</span> adjvex;<span class="hljs-comment">//该弧所指向的顶点的下标或者位置</span><br>EdgeType weight;<span class="hljs-comment">//权值，对于非网图可以不需要</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EdgeNode</span> *<span class="hljs-title">next</span>;</span><span class="hljs-comment">//指向下一个邻接点</span><br>&#125;EdgeNode;<br><br><span class="hljs-comment">/*顶点表结点*/</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">VertexNode</span>&#123;</span><br>Vertex data;<span class="hljs-comment">//顶点域，存储顶点信息</span><br>EdgeNode *firstedge<span class="hljs-comment">//边表头指针</span><br>&#125;VertexNode, AdjList[MAXVEX];<br><br><span class="hljs-comment">/*邻接表*/</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>AdjList adjList;<br><span class="hljs-type">int</span> numVertexes, numEdges;<span class="hljs-comment">//图中当前顶点数和边数</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>这里对于图的存储结构只做简单的介绍</strong>，<strong>如果要了解更多性质自行查找</strong></p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu部署-换源</title>
    <link href="/super_zhu/2022/11/02/ubantu%E9%83%A8%E7%BD%B2-%E6%8D%A2%E6%BA%90/"/>
    <url>/super_zhu/2022/11/02/ubantu%E9%83%A8%E7%BD%B2-%E6%8D%A2%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<h1 id="源是什么"><a href="#源是什么" class="headerlink" title="源是什么"></a>源是什么</h1><p>源对于<code>ubuntu</code>通俗点来说就是一个软件库，下载软件时只需要记得相应软件名，通过包管理工具apt可一键下载，比如下载<code>gcc</code>  只需要<code>sudo apt install gcc</code> 即可。</p><p><em>apt具体相关可前往<a href="https://www.runoob.com/linux/linux-comm-apt.html%E4%BA%86%E8%A7%A3">https://www.runoob.com/linux/linux-comm-apt.html了解</a></em></p><h1 id="为什么要换源"><a href="#为什么要换源" class="headerlink" title="为什么要换源"></a>为什么要换源</h1><p><code>Ubuntu</code>的源服务器是在外国，所以在我们平常下载软件的时候，下载速度是很慢的，甚至可能断掉，所以会使用国内的镜像，科大，阿里，网易，清华的源速度飞快，不但节省生命，还可以降低心脏病发病概率。</p><blockquote><p>镜像通常用于为相同信息内容提供不同的源，特别是在下载量大的时候提供了一种可靠的网络连接。制作镜像是一种文件同步的过程。“镜像网站”（英文:Mirror sites [1] ），又译作““镜像站点” ，亦即把一个互联网上的网站数据“拷贝”到本地服务器，并保持本地服务器数据的同步更新，因此也称为“复制网络站点” 。</p><hr><p>镜像源就是把官方的源做一个镜像，你可以在这下载软件。<br>比如<code>ubuntu</code>官方源在国外，下载软件可能会很慢，这时候就需要换成国内的镜像源。</p></blockquote><h1 id="换源过程"><a href="#换源过程" class="headerlink" title="换源过程"></a>换源过程</h1><p>我以Ubuntu18.04为例</p><h2 id="源在哪里"><a href="#源在哪里" class="headerlink" title="源在哪里"></a>源在哪里</h2><p>源一般在系统的<code>/etc/apt/sources.list</code>中，在命令行输入<code>vim sources.list</code>即可查看</p><h2 id="开始换源"><a href="#开始换源" class="headerlink" title="开始换源"></a>开始换源</h2><p>首先我们要寻找合适的国内源，一般有阿里源，清华源，中科院源，这里我以阿里为例</p><p>点击<a href="https://developer.aliyun.com/mirror/ubuntu">ubuntu镜像_ubuntu下载地址_ubuntu安装教程-阿里巴巴开源镜像站 (aliyun.com)</a>，进入后根据自己系统版本选择合适的源</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs awk">deb https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> bionic main restricted universe multiverse<br>deb-src https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> bionic main restricted universe multiverse<br><br>deb https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> bionic-security main restricted universe multiverse<br>deb-src https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> bionic-security main restricted universe multiverse<br><br>deb https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> bionic-updates main restricted universe multiverse<br>deb-src https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> bionic-updates main restricted universe multiverse<br><br><span class="hljs-comment"># deb https://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="hljs-comment"># deb-src https://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><br>deb https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> bionic-backports main restricted universe multiverse<br>deb-src https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> bionic-backports main restricted universe multiverse<br><br></code></pre></td></tr></table></figure><p>如下是Ubuntu 18.04的中科院的源<a href="https://mirrors.ustc.edu.cn/repogen/">https://mirrors.ustc.edu.cn/repogen/</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk">deb https:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn<span class="hljs-regexp">/ubuntu/</span> bionic main restricted universe multiverse<br>deb-src https:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn<span class="hljs-regexp">/ubuntu/</span> bionic main restricted universe multiverse<br><br>deb https:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn<span class="hljs-regexp">/ubuntu/</span> bionic-security main restricted universe multiverse<br>deb-src https:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn<span class="hljs-regexp">/ubuntu/</span> bionic-security main restricted universe multiverse<br><br>deb https:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn<span class="hljs-regexp">/ubuntu/</span> bionic-updates main restricted universe multiverse<br>deb-src https:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn<span class="hljs-regexp">/ubuntu/</span> bionic-updates main restricted universe multiverse<br><br>deb https:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn<span class="hljs-regexp">/ubuntu/</span> bionic-backports main restricted universe multiverse<br>deb-src https:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn<span class="hljs-regexp">/ubuntu/</span> bionic-backports main restricted universe multiverse<br></code></pre></td></tr></table></figure><p>然后，来到系统下的&#x2F;etc&#x2F;apt，输入命令vim sources.list打开文件，删除原来的，粘贴上去</p><p>输入<code>:wq</code>，点击enter键推出，再输入</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> update<br>sudo apt-<span class="hljs-built_in">get</span> upgrade<br></code></pre></td></tr></table></figure><p>遇到问题只需要一直y即可</p><p>换源完成</p>]]></content>
    
    
    <categories>
      
      <category>服务器部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu部署-mysql</title>
    <link href="/super_zhu/2022/11/02/ubuntu%E9%83%A8%E7%BD%B2-mysql/"/>
    <url>/super_zhu/2022/11/02/ubuntu%E9%83%A8%E7%BD%B2-mysql/</url>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>在下载中，如遇到源的问题，请跳转到换源篇章</p><p>需要了解更多或者更为细致，请前往MySQL官网<a href="https://dev.mysql.com/">软件开发模块 ：： 开发者专区 (mysql.com)</a></p><h1 id="开始配置"><a href="#开始配置" class="headerlink" title="开始配置"></a>开始配置</h1><h2 id="下载mysql"><a href="#下载mysql" class="headerlink" title="下载mysql"></a>下载mysql</h2><p>在命令行输入，以下命令，遇到问题输入y即可</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">sudo apt install mysql-<span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>下载好后，默认有一个没有密码的超级账号，输入以下代码即可进入mysql命令行</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo mysql</span><br></code></pre></td></tr></table></figure><h2 id="配置用户"><a href="#配置用户" class="headerlink" title="配置用户"></a>配置用户</h2><h3 id="查看用户表"><a href="#查看用户表" class="headerlink" title="查看用户表"></a>查看用户表</h3><p>mysql的用户信息是存储在mysql库的user表里的，执行以下命令,查看用户的信息</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">use mysql;<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span>;<br></code></pre></td></tr></table></figure><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><p>使用以下命令，可创建用户</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;IP地址或者域名&#x27;</span>  IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;*password*&#x27;</span>;<br></code></pre></td></tr></table></figure><p>其中<strong>ip地址或者域名</strong>那里，如果使用通配符**%**代替，则代表可以在任何电脑使用你这个账号进行登录</p><h3 id="查看用户权限"><a href="#查看用户权限" class="headerlink" title="查看用户权限"></a>查看用户权限</h3><p>刚刚创建的用户是没有操作表权限的</p><p>在命令行输入</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">SHOW</span> GRANTS FOR <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;ip地址&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="授予用户权限"><a href="#授予用户权限" class="headerlink" title="授予用户权限"></a>授予用户权限</h3><p>授予用户的万能公式是</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">grant</span> <span class="hljs-string">&#x27;权限列表&#x27;</span>  <span class="hljs-keyword">on</span> <span class="hljs-string">&#x27;数据库名.表名&#x27;</span> <span class="hljs-keyword">to</span>  <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;主机名&#x27;</span>&lt;<span class="hljs-keyword">WITH</span> <span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">OPTION</span>&gt;<br></code></pre></td></tr></table></figure><p>其中<code>WITH GRANT OPTION</code>是代表赋予这个用户赋予其他用户的权限，可加可不加</p><p>要是要，赋予这个用户全部权限，可执行以下命令</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span>  <span class="hljs-keyword">ON</span> *.*  <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;主机IP地址&#x27;</span>  <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">OPTION</span>;<br></code></pre></td></tr></table></figure><p>其中<code>All</code>代表赋予<strong>出除了授予他人特权之外的全部权限</strong>，其中<code>*.*</code>代表可以操作所有的库中的所有表</p><h3 id="修改用户密码"><a href="#修改用户密码" class="headerlink" title="修改用户密码"></a>修改用户密码</h3><p>使用以下命令，即可</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;主机名&#x27;</span> identified  <span class="hljs-keyword">with</span> caching_sha2_password  <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;新密码&#x27;</span><br></code></pre></td></tr></table></figure><p>其中<code>caching_sha2_password</code>代表登录时身份验证是使用caching_sha2_password插件进行验证</p><h2 id="超级重要的！！！"><a href="#超级重要的！！！" class="headerlink" title="超级重要的！！！"></a>超级重要的！！！</h2><p><strong>这个对于想要远程连接时是必须的！！！</strong></p><p><strong>因为Ubuntu的mysql默认是不允许其他主机连接，所以必须修改相应配置！！！</strong></p><p><strong>本人表示非常难受（因为本来不知道）</strong></p><p>配置文件是<code>/etc/mysql/mysql.conf.d/mysqld.cnf</code>输入命令行</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo vim <span class="hljs-regexp">/etc/my</span>sql<span class="hljs-regexp">/mysql.conf.d/my</span>sqld.cnf<br></code></pre></td></tr></table></figure><p>将其中的<code>bind-address=127.0.0.1</code>修改成<code>bind-address=0.0.0.0</code></p><p>然后再<code>:wq</code>保存退出</p><p>再输入命令重启mysql</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo service mysql restart</span><br></code></pre></td></tr></table></figure><h1 id="mysql的校验规则"><a href="#mysql的校验规则" class="headerlink" title="mysql的校验规则"></a>mysql的校验规则</h1><p>mysql 5.7后如果程序中的sql语句使用了group by等，可能会报1055的错，其原因是mysql5.7 版本中有了一个select mode（严格模式）</p><h2 id="临时办法（重启mysql后失效）"><a href="#临时办法（重启mysql后失效）" class="headerlink" title="临时办法（重启mysql后失效）"></a>临时办法（重启mysql后失效）</h2><p>打开mysql命令行执行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> <span class="hljs-keyword">GLOBAL</span> sql_mode<span class="hljs-operator">=</span>(<span class="hljs-keyword">SELECT</span> REPLACE(@<span class="hljs-variable">@sql</span>_mode,<span class="hljs-string">&#x27;ONLY_FULL_GROUP_BY&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>));<br></code></pre></td></tr></table></figure><p>但要在拥有root权限下</p><p>其中原因sql_mode是一组语法校验规则</p><h2 id="永久办法"><a href="#永久办法" class="headerlink" title="永久办法"></a>永久办法</h2><p>打开<code>/etc/mysql/mysql.conf.d/mysqld.cnf</code>文件</p><p>在其<code>[mysqld]</code>下添加</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 设置sql_mode,关闭ONLY_FULL_GROUP_BY,避免使用<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span>函数导致<span class="hljs-number">1055</span>错误<br>sql_mode<span class="hljs-operator">=</span>STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION<br><br></code></pre></td></tr></table></figure><p>然后再进行重启mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo service mysql restart<br></code></pre></td></tr></table></figure><p>完成</p>]]></content>
    
    
    <categories>
      
      <category>服务器部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu部署-nginx</title>
    <link href="/super_zhu/2022/11/01/ubuntu%E9%83%A8%E7%BD%B2-nginx/"/>
    <url>/super_zhu/2022/11/01/ubuntu%E9%83%A8%E7%BD%B2-nginx/</url>
    
    <content type="html"><![CDATA[<h1 id="配置https"><a href="#配置https" class="headerlink" title="配置https"></a>配置https</h1><p>需编辑<code>/etc/nginx/nginx.conf</code>或者<code>/etc/nginx/sites-enabled/default</code></p><p>请按照以下格式配置</p><p>若是想要nginx更为详细的配置，请前往<a href="https://blog.csdn.net/aiwangtingyun/article/details/118823582">(151条消息) 【Nginx】之 nginx.conf 配置详解_王廷云的博客的博客-CSDN博客_nginxconf配置</a></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs applescript">server&#123;<br>listen <span class="hljs-number">443</span> ssl; <br>     <span class="hljs-comment">#请填写绑定证书的域名</span><br>     server_name qiuwo.xyz; <br>     <span class="hljs-comment">#请填写证书文件的相对路径或绝对路径</span><br>     ssl_certificate qiuwo.xyz_bundle.crt; <span class="hljs-comment">#这里是相对路径</span><br>     <span class="hljs-comment">#请填写私钥文件的相对路径或绝对路径</span><br>     ssl_certificate_key qiuwo.xyz.key;<span class="hljs-comment">#这里是相对路径</span><br>     ssl_session_timeout <span class="hljs-number">5</span>m;<br>     <span class="hljs-comment">#请按照以下协议配置</span><br>     ssl_protocols TLSv1<span class="hljs-number">.2</span> TLSv1<span class="hljs-number">.3</span>; <br>     <span class="hljs-comment">#请按照以下套件配置，配置加密套件，写法遵循 openssl 标准。</span><br>     ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; <br>     ssl_prefer_server_ciphers <span class="hljs-keyword">on</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="反向代理请求"><a href="#反向代理请求" class="headerlink" title="反向代理请求"></a>反向代理请求</h1><h2 id="proxy-pass"><a href="#proxy-pass" class="headerlink" title="proxy_pass"></a>proxy_pass</h2><p>反向代理请求，我一般使用proxy_pass进行代理，如下</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">location</span> <span class="hljs-title">/wx_post</span> &#123;<br>proxy_pass http://<span class="hljs-number">124.221</span>.<span class="hljs-number">80.208</span>:<span class="hljs-number">8083</span><br>&#125;<br></code></pre></td></tr></table></figure><p> 当我对服务器发起<a href="https://qiuwo.xyz/wx_post/xxx%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8Cnginx%E4%BC%9A%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%88%B0http://124.221.80.208:8083/wx_post/xxx">https://qiuwo.xyz/wx_post/xxx的时候，nginx会反向代理到http://124.221.80.208:8083/wx_post/xxx</a></p><h2 id="“-x2F-“有无的区别"><a href="#“-x2F-“有无的区别" class="headerlink" title="“&#x2F;“有无的区别"></a>“&#x2F;“有无的区别</h2><p>现在我请求的地址为<a href="https://qiuwo.xyz/wx_post/xxx">https://qiuwo.xyz/wx_post/xxx</a></p><p>有以下请求情况</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs awk">location /wx_post &#123;<br>proxy_pass http:<span class="hljs-regexp">//</span><span class="hljs-number">124.221</span>.<span class="hljs-number">80.208</span>:<span class="hljs-number">8083</span>           --A<br>&#125;<br><br><br>location /wx_post &#123;<br>proxy_pass http:<span class="hljs-regexp">//</span><span class="hljs-number">124.221</span>.<span class="hljs-number">80.208</span>:<span class="hljs-number">8083</span>/          --B<br>&#125;<br><br><br>location <span class="hljs-regexp">/wx_post/</span> &#123;<br>proxy_pass http:<span class="hljs-regexp">//</span><span class="hljs-number">124.221</span>.<span class="hljs-number">80.208</span>:<span class="hljs-number">8083</span>/         --C<br>&#125;<br><br><br>location <span class="hljs-regexp">/wx_post/</span> &#123;<br>proxy_pass http:<span class="hljs-regexp">//</span><span class="hljs-number">124.221</span>.<span class="hljs-number">80.208</span>:<span class="hljs-number">8083</span>           --D<br>&#125;<br></code></pre></td></tr></table></figure><p>对应的请求结果为</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">124.221</span>.<span class="hljs-number">80.208</span>:<span class="hljs-number">8083</span><span class="hljs-regexp">/wx_post/</span>xxx  --A<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">124.221</span>.<span class="hljs-number">80.208</span>:<span class="hljs-number">8083</span><span class="hljs-regexp">//</span>xxx   --B<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">124.221</span>.<span class="hljs-number">80.208</span>:<span class="hljs-number">8083</span>/xxx    --C<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">124.221</span>.<span class="hljs-number">80.208</span>:<span class="hljs-number">8083</span><span class="hljs-regexp">/wx_post/</span>xxx   --D<br></code></pre></td></tr></table></figure><p>在对于端口后面还有路径也是一样的情况，比如配置为</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">location /wx_post &#123;<br>proxy_pass http:<span class="hljs-regexp">//</span><span class="hljs-number">124.221</span>.<span class="hljs-number">80.208</span>:<span class="hljs-number">8083</span>/hhh<br>&#125;<br>location <span class="hljs-regexp">/wx_post/</span> &#123;<br>proxy_pass http:<span class="hljs-regexp">//</span><span class="hljs-number">124.221</span>.<span class="hljs-number">80.208</span>:<span class="hljs-number">8083</span>/hhh<br>&#125;<br></code></pre></td></tr></table></figure><p>则反向代理为<a href="http://124.221.80.208:8083/hhh/xxx%E5%92%8Chttp://124.221.80.208:8083/hhhxxx">http://124.221.80.208:8083/hhh/xxx和http://124.221.80.208:8083/hhhxxx</a></p><h2 id="配置静态资源"><a href="#配置静态资源" class="headerlink" title="配置静态资源"></a>配置静态资源</h2><p>配置静态资源有两种方式root和alias</p><p>假如你文件路径为&#x2F;home&#x2F;ubuntu&#x2F;post&#x2F;images&#x2F;xxx.jpg</p><p>​      请求地址为<a href="https://qiuwo.xyz/xxx">https://qiuwo.xyz/xxx</a></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment"># 请求地址为https://qiuwo.xyz/ubuntu/post/images/xxx.png</span><br><span class="hljs-keyword">location</span> <span class="hljs-title">/ubuntu</span> &#123;   <br>    root /home<br>&#125;<br><br><span class="hljs-comment">#请求地址 https://qiuwo.xyz/hhh/post/images/xxx.png</span><br><span class="hljs-keyword">location</span> <span class="hljs-title">/hhh</span> &#123;<br>    alias /home/ubuntu  <span class="hljs-comment">#如果你在Ubuntu后面加上斜杠&quot;/&quot;那么home后面也要</span><br>&#125;<br></code></pre></td></tr></table></figure><p>以上是情况实例</p>]]></content>
    
    
    <categories>
      
      <category>服务器部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022年绘蓝杯-小程序赛题</title>
    <link href="/super_zhu/2022/10/31/2022%E5%B9%B4%E7%BB%98%E8%93%9D%E6%9D%AF%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8FB%E7%BB%84%E8%B5%9B%E9%A2%98/"/>
    <url>/super_zhu/2022/10/31/2022%E5%B9%B4%E7%BB%98%E8%93%9D%E6%9D%AF%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8FB%E7%BB%84%E8%B5%9B%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="2022年绘蓝杯微信小程序B组赛题"><a href="#2022年绘蓝杯微信小程序B组赛题" class="headerlink" title="2022年绘蓝杯微信小程序B组赛题"></a>2022年绘蓝杯微信小程序B组赛题</h1><p><strong>主题不限（需体现一定的代码量，逻辑量）</strong></p><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><h3 id="1-视觉要求"><a href="#1-视觉要求" class="headerlink" title="1.视觉要求"></a>1.视觉要求</h3><p>（1）界面优美，元素排列整齐合理</p><p>（2）至少包含三个tabbar页面和两个子页面</p><h3 id="2-功能要求"><a href="#2-功能要求" class="headerlink" title="2.功能要求"></a>2.功能要求</h3><p>（1）实现页面的跳转</p><p>（2）使用自定义组件</p><p>（2）运用有一定的JavaScript知识（看熟练程度加分）</p><p>（3）使用api（原生或者第三方）实现相应功能（加分项）</p><p>（3）可以简单使用云开发数据库（加分项）</p><h3 id="3-推荐相关资料"><a href="#3-推荐相关资料" class="headerlink" title="3.推荐相关资料"></a>3.推荐相关资料</h3><p>（<strong>云开发&amp;小程序原生api官方文档）</strong><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/">微信开放文档 (qq.com)</a></p><p><strong>（推荐云开发学习视频）</strong><a href="https://www.bilibili.com/video/BV12z4y1R77r/?spm_id_from=333.337.search-card.all.click">微信小程序云开发基础到实战 云数据库 云函数 云存储 云调用【新视觉】_哔哩哔哩_bilibili</a></p><p> <strong>（第三方api接口）</strong></p><p>  <a href="https://market.aliyun.com/data">API_API接口平台_API数据【最新】_API接口大全_API认证 - 阿里云 (aliyun.com)</a></p><p> <a href="https://wx.jdcloud.com/api/0_0/1">  API-免费API数据接口平台-京东万象 (jdcloud.com)</a></p><p><strong>也可以自行查找相关资料，以上只是推荐</strong></p>]]></content>
    
    
    <categories>
      
      <category>科协事务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>绘蓝杯</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
